"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[5498],{4249:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorials/clickhouse_analytics","title":"ClickHouse Analytics Platform","description":"ClickHouse integration with Rspamd allows you to build a powerful analytics platform for mail traffic analysis, threat intelligence, and compliance reporting. This tutorial guides you through setting up a complete analytical infrastructure.","source":"@site/docs/tutorials/clickhouse_analytics.md","sourceDirName":"tutorials","slug":"/tutorials/clickhouse_analytics","permalink":"/docs.rspamd.com/branches/master/ru/tutorials/clickhouse_analytics","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/tutorials/clickhouse_analytics.md","tags":[],"version":"current","frontMatter":{"title":"ClickHouse Analytics Platform"},"sidebar":"docs","previous":{"title":"DKIM Signing Guide","permalink":"/docs.rspamd.com/branches/master/ru/tutorials/dkim_signing_guide"},"next":{"title":"Rspamd architecture","permalink":"/docs.rspamd.com/branches/master/ru/developers/architecture"}}');var a=s(4848),r=s(8453);const i={title:"ClickHouse Analytics Platform"},o="ClickHouse Analytics: Building a Mail Intelligence Platform",c={},l=[{value:"What is ClickHouse?",id:"what-is-clickhouse",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"Step 1: Install ClickHouse",id:"step-1-install-clickhouse",level:3},{value:"Step 2: Configure Rspamd ClickHouse Module",id:"step-2-configure-rspamd-clickhouse-module",level:3},{value:"Step 3: Test the Integration",id:"step-3-test-the-integration",level:3},{value:"Step 4: Create Materialized Views (Optional)",id:"step-4-create-materialized-views-optional",level:3},{value:"Advanced Column Configuration",id:"advanced-column-configuration",level:2},{value:"Selector Examples",id:"selector-examples",level:3},{value:"Complete Custom Selector Integration",id:"complete-custom-selector-integration",level:3},{value:"Step 1: Register Custom Selectors",id:"step-1-register-custom-selectors",level:4},{value:"Step 2: Use Custom Selectors in ClickHouse Configuration",id:"step-2-use-custom-selectors-in-clickhouse-configuration",level:4},{value:"Step 3: Restart and Verify",id:"step-3-restart-and-verify",level:4},{value:"Step 4: Check ClickHouse Table Structure",id:"step-4-check-clickhouse-table-structure",level:4},{value:"Step 5: Query Your Custom Data",id:"step-5-query-your-custom-data",level:4},{value:"Advanced Analytics Queries",id:"advanced-analytics-queries",level:2},{value:"Mail Volume Analysis",id:"mail-volume-analysis",level:3},{value:"Spam Detection Effectiveness",id:"spam-detection-effectiveness",level:3},{value:"Threat Intelligence",id:"threat-intelligence",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Building Dashboards",id:"building-dashboards",level:2},{value:"Grafana Integration",id:"grafana-integration",level:3},{value:"Dashboard Configuration",id:"dashboard-configuration",level:3},{value:"Real-time Monitoring",id:"real-time-monitoring",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom Analytics Functions",id:"custom-analytics-functions",level:3},{value:"Machine Learning Integration",id:"machine-learning-integration",level:3},{value:"Alerting and Monitoring",id:"alerting-and-monitoring",level:3},{value:"Production Considerations",id:"production-considerations",level:2},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Data Retention Policies",id:"data-retention-policies",level:3},{value:"Backup and Recovery",id:"backup-and-recovery",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"clickhouse-analytics-building-a-mail-intelligence-platform",children:"ClickHouse Analytics: Building a Mail Intelligence Platform"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"ClickHouse integration"})," with Rspamd allows you to build a powerful analytics platform for mail traffic analysis, threat intelligence, and compliance reporting. This tutorial guides you through setting up a complete analytical infrastructure."]}),"\n",(0,a.jsx)(n.h2,{id:"what-is-clickhouse",children:"What is ClickHouse?"}),"\n",(0,a.jsx)(n.p,{children:"ClickHouse is a high-performance columnar database management system designed for analytics:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Fast analytics"}),": Optimized for real-time analytical queries"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scalable"}),": Handles billions of rows with excellent performance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SQL interface"}),": Standard SQL with analytics extensions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Compression"}),": Efficient storage with advanced compression"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With Rspamd integration, you can:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Analyze mail patterns and trends"}),"\n",(0,a.jsx)(n.li,{children:"Build threat intelligence dashboards"}),"\n",(0,a.jsx)(n.li,{children:"Generate compliance reports"}),"\n",(0,a.jsx)(n.li,{children:"Monitor spam detection effectiveness"}),"\n",(0,a.jsx)(n.li,{children:"Create custom analytics workflows"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-install-clickhouse",children:"Step 1: Install ClickHouse"}),"\n",(0,a.jsx)(n.p,{children:"Install ClickHouse server:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Add ClickHouse repository (Ubuntu/Debian)\nsudo apt-get install -y apt-transport-https ca-certificates dirmngr\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8919F6BD2B48D754\n\necho "deb https://packages.clickhouse.com/deb stable main" | sudo tee \\\n    /etc/apt/sources.list.d/clickhouse.list\n\n# Install ClickHouse\nsudo apt-get update\nsudo apt-get install -y clickhouse-server clickhouse-client\n\n# Start ClickHouse\nsudo systemctl start clickhouse-server\nsudo systemctl enable clickhouse-server\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-configure-rspamd-clickhouse-module",children:"Step 2: Configure Rspamd ClickHouse Module"}),"\n",(0,a.jsx)(n.p,{children:"Create the ClickHouse configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-hcl",children:'# /etc/rspamd/local.d/clickhouse.conf\n\n# Enable ClickHouse logging\nenabled = true;\n\n# ClickHouse connection settings\nserver = "http://localhost:8123/";\ndatabase = "rspamd";\ntable = "rspamd";\n\n# What to log\ndata_retention {\n  enable = true;\n  # Keep data for 90 days\n  period = "90d";\n}\n\n# Additional fields using both built-in and custom selectors\nextra_columns = {\n  # Built-in selectors\n  "message_size" = "size";\n  "recipient_count" = "rcpts:count";\n  "from_domain" = "from:domain";\n  "mime_type" = "header(\'Content-Type\')";\n  "user_agent" = "header(\'User-Agent\')";\n  \n  # Custom selectors (must be registered in rspamd.local.lua first!)\n  "attachment_count" = "attachment_count()";\n  "has_executable" = "has_dangerous_attachment()";\n  "attachment_extensions" = "attachment_types()";\n  "suspicious_url_count" = "suspicious_domains_count()";\n  "text_html_ratio" = "text_to_html_ratio()";\n  "language_detection" = "detected_languages()";\n  "symbol_groups_summary" = "symbol_groups_stats()";\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-test-the-integration",children:"Step 3: Test the Integration"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note"}),": Rspamd's ClickHouse module automatically creates the database and tables when it starts. You don't need to create them manually."]}),"\n",(0,a.jsx)(n.p,{children:"First, let's start Rspamd and verify the integration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Restart Rspamd to load ClickHouse config\nsudo systemctl restart rspamd\n\n# Send test message\necho "Test message for ClickHouse" | rspamc\n\n# Check ClickHouse logs\ntail -f /var/log/clickhouse-server/clickhouse-server.log\n\n# Check if database and table were created\nclickhouse-client --query="SHOW DATABASES"\nclickhouse-client --query="SHOW TABLES FROM rspamd"\n\n# Query data to verify logging works\nclickhouse-client --database=rspamd --query="SELECT count() FROM rspamd WHERE Date = today()"\n\n# Check table structure (including custom columns)\nclickhouse-client --database=rspamd --query="DESCRIBE TABLE rspamd"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-4-create-materialized-views-optional",children:"Step 4: Create Materialized Views (Optional)"}),"\n",(0,a.jsx)(n.p,{children:"After Rspamd creates the main table, you can create materialized views for faster analytics:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Connect to ClickHouse\nclickhouse-client --database=rspamd\n\n-- Create materialized views for common queries\nCREATE MATERIALIZED VIEW spam_stats_daily\nENGINE = SummingMergeTree()\nPARTITION BY toYYYYMM(Date)\nORDER BY (Date, Action)\nAS SELECT\n    Date,\n    Action,\n    count() as Messages,\n    avg(Score) as Avg_Score,\n    avg(Scan_Time) as Avg_Scan_Time,\n    avg(message_size) as Avg_Size\nFROM rspamd\nGROUP BY Date, Action;\n\n-- IP reputation view with custom columns\nCREATE MATERIALIZED VIEW ip_reputation\nENGINE = SummingMergeTree()\nPARTITION BY toYYYYMM(Date)\nORDER BY (Date, IP)\nAS SELECT\n    Date,\n    IP,\n    Action,\n    count() as Messages,\n    avg(Score) as Avg_Score,\n    country_code,\n    asn_number,\n    countIf(has_executable = '1') as Executable_Count,\n    countIf(toUInt32(url_count) > 0) as Messages_With_URLs\nFROM rspamd\nGROUP BY Date, IP, Action, country_code, asn_number;\n\n-- Attachment analysis view\nCREATE MATERIALIZED VIEW attachment_stats\nENGINE = SummingMergeTree()\nPARTITION BY toYYYYMM(Date)\nORDER BY (Date, attachment_extensions)\nAS SELECT\n    Date,\n    attachment_extensions,\n    count() as Messages,\n    avg(Score) as Avg_Score,\n    countIf(Action = 'reject') as Rejected,\n    countIf(has_executable = '1') as Has_Executable\nFROM rspamd\nWHERE toUInt32(attachment_count) > 0\nGROUP BY Date, attachment_extensions;\n\n-- Language detection view\nCREATE MATERIALIZED VIEW language_stats\nENGINE = SummingMergeTree()\nPARTITION BY toYYYYMM(Date)\nORDER BY (Date, language_detection)\nAS SELECT\n    Date,\n    language_detection,\n    count() as Messages,\n    avg(Score) as Avg_Score,\n    countIf(Action = 'reject') as Rejected\nFROM rspamd\nWHERE language_detection != ''\nGROUP BY Date, language_detection;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-column-configuration",children:"Advanced Column Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"selector-examples",children:"Selector Examples"}),"\n",(0,a.jsx)(n.p,{children:"Rspamd provides powerful selectors to extract data from messages. Here are additional examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-hcl",children:'# /etc/rspamd/local.d/clickhouse.conf\n\nextra_columns = {\n  # Basic message properties\n  "message_size" = "size";\n  "recipient_count" = "rcpts:count";\n  "mime_parts_count" = "parts:count";\n  \n  # Network and geographic information\n  "client_hostname" = "hostname";\n  "is_authenticated" = "user";\n  \n  # Header analysis\n  "subject_length" = "header(\'Subject\'):len";\n  "from_domain" = "from:domain";\n  "reply_to" = "header(\'Reply-To\')";\n  "message_id" = "header(\'Message-ID\')";\n  "content_type" = "header(\'Content-Type\')";\n  "x_mailer" = "header(\'X-Mailer\')";\n  "received_count" = "received:count";\n  \n  # URL analysis\n  "url_count" = "urls:count";\n  "unique_domains_count" = "urls:domains:count";\n  \n  # Time-based information\n  "message_date" = "header(\'Date\'):time(\'%Y-%m-%d\')";\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"complete-custom-selector-integration",children:"Complete Custom Selector Integration"}),"\n",(0,a.jsx)(n.p,{children:"Here's how to integrate custom selectors with ClickHouse from start to finish:"}),"\n",(0,a.jsx)(n.h4,{id:"step-1-register-custom-selectors",children:"Step 1: Register Custom Selectors"}),"\n",(0,a.jsxs)(n.p,{children:["First, register your custom selectors in ",(0,a.jsx)(n.code,{children:"/etc/rspamd/rspamd.local.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- /etc/rspamd/rspamd.local.lua\n\nlocal lua_selectors = require \"lua_selectors\"\n\n-- Register custom extractors for ClickHouse analytics\n\n-- Attachment count extractor\nlua_selectors.register_extractor(rspamd_config, \"attachment_count\", {\n  get_value = function(task, args)\n    local parts = task:get_parts()\n    local count = 0\n    for _, part in ipairs(parts) do\n      if part:get_filename() then\n        count = count + 1\n      end\n    end\n    return tostring(count), 'string'\n  end,\n  description = 'Get number of attachments'\n})\n\n-- Dangerous attachment detector\nlua_selectors.register_extractor(rspamd_config, \"has_dangerous_attachment\", {\n  get_value = function(task, args)\n    local dangerous_exts = {exe=true, scr=true, bat=true, com=true, pif=true, vbs=true, js=true}\n    local parts = task:get_parts()\n    \n    for _, part in ipairs(parts) do\n      local filename = part:get_filename()\n      if filename then\n        local ext = filename:match(\"%.([^%.]+)$\")\n        if ext and dangerous_exts[ext:lower()] then\n          return \"1\", 'string'\n        end\n      end\n    end\n    return \"0\", 'string'\n  end,\n  description = 'Check if message has dangerous attachments'\n})\n\n-- Attachment types collector\nlua_selectors.register_extractor(rspamd_config, \"attachment_types\", {\n  get_value = function(task, args)\n    local parts = task:get_parts()\n    local extensions = {}\n    \n    for _, part in ipairs(parts) do\n      local filename = part:get_filename()\n      if filename then\n        local ext = filename:match(\"%.([^%.]+)$\")\n        if ext then\n          table.insert(extensions, ext:lower())\n        end\n      end\n    end\n    return table.concat(extensions, \",\"), 'string'\n  end,\n  description = 'Get list of attachment file extensions'\n})\n\n-- Suspicious domains counter\nlua_selectors.register_extractor(rspamd_config, \"suspicious_domains_count\", {\n  get_value = function(task, args)\n    local urls = task:get_urls()\n    local suspicious_count = 0\n    local suspicious_tlds = {tk=true, ml=true, ga=true, cf=true}\n    \n    for _, url in ipairs(urls) do\n      local host = url:get_host()\n      if host then\n        local tld = host:match(\"%.([^%.]+)$\")\n        if tld and suspicious_tlds[tld:lower()] then\n          suspicious_count = suspicious_count + 1\n        end\n      end\n    end\n    return tostring(suspicious_count), 'string'\n  end,\n  description = 'Count URLs with suspicious TLDs'\n})\n\n-- Text to HTML ratio calculator\nlua_selectors.register_extractor(rspamd_config, \"text_to_html_ratio\", {\n  get_value = function(task, args)\n    local parts = task:get_parts()\n    local text_parts = 0\n    local html_parts = 0\n    \n    for _, part in ipairs(parts) do\n      if part:is_text() then\n        text_parts = text_parts + 1\n      elseif part:is_html() then\n        html_parts = html_parts + 1\n      end\n    end\n    \n    if html_parts > 0 then\n      local ratio = text_parts / html_parts\n      return string.format(\"%.2f\", ratio), 'string'\n    else\n      return \"0\", 'string'\n    end\n  end,\n  description = 'Calculate text to HTML parts ratio'\n})\n\n-- Language detection\nlua_selectors.register_extractor(rspamd_config, \"detected_languages\", {\n  get_value = function(task, args)\n    local parts = task:get_parts()\n    local languages = {}\n    \n    for _, part in ipairs(parts) do\n      if part:is_text() then\n        local lang = part:get_language()\n        if lang then\n          languages[lang] = true\n        end\n      end\n    end\n    \n    local lang_list = {}\n    for lang, _ in pairs(languages) do\n      table.insert(lang_list, lang)\n    end\n    return table.concat(lang_list, \",\"), 'string'\n  end,\n  description = 'Get detected message languages'\n})\n\n-- Symbol groups statistics\nlua_selectors.register_extractor(rspamd_config, \"symbol_groups_stats\", {\n  get_value = function(task, args)\n    local symbols = task:get_symbols_all()\n    local groups = {}\n    \n    for name, symbol in pairs(symbols) do\n      if symbol.score and symbol.score > 0 then\n        local group = name:match(\"^([^_]+)\")\n        if group then\n          groups[group] = (groups[group] or 0) + 1\n        end\n      end\n    end\n    \n    local group_stats = {}\n    for group, count in pairs(groups) do\n      table.insert(group_stats, group .. \":\" .. count)\n    end\n    return table.concat(group_stats, \",\"), 'string'\n  end,\n  description = 'Get symbol groups statistics'\n})\n\n-- Authentication results extractors\n\n-- SPF result and domain\nlua_selectors.register_extractor(rspamd_config, \"spf_result\", {\n  get_value = function(task, args)\n    if task:has_symbol('R_SPF_ALLOW') then\n      return \"pass\", 'string'\n    elseif task:has_symbol('R_SPF_FAIL') then\n      return \"fail\", 'string'\n    elseif task:has_symbol('R_SPF_SOFTFAIL') then\n      return \"softfail\", 'string'\n    elseif task:has_symbol('R_SPF_NEUTRAL') then\n      return \"neutral\", 'string'\n    elseif task:has_symbol('R_SPF_PERMFAIL') then\n      return \"permerror\", 'string'\n    else\n      return \"none\", 'string'\n    end\n  end,\n  description = 'Get SPF authentication result'\n})\n\n-- DKIM result and domain\nlua_selectors.register_extractor(rspamd_config, \"dkim_result\", {\n  get_value = function(task, args)\n    if task:has_symbol('R_DKIM_ALLOW') then\n      return \"pass\", 'string'\n    elseif task:has_symbol('R_DKIM_REJECT') then\n      return \"fail\", 'string'\n    elseif task:has_symbol('R_DKIM_TEMPFAIL') then\n      return \"temperror\", 'string'\n    elseif task:has_symbol('R_DKIM_PERMFAIL') then\n      return \"permerror\", 'string'\n    else\n      return \"none\", 'string'\n    end\n  end,\n  description = 'Get DKIM authentication result'\n})\n\n-- DMARC result and policy\nlua_selectors.register_extractor(rspamd_config, \"dmarc_result\", {\n  get_value = function(task, args)\n    if task:has_symbol('DMARC_POLICY_ALLOW') then\n      return \"pass\", 'string'\n    elseif task:has_symbol('DMARC_POLICY_REJECT') then\n      return \"reject\", 'string'\n    elseif task:has_symbol('DMARC_POLICY_QUARANTINE') then\n      return \"quarantine\", 'string'\n    elseif task:has_symbol('DMARC_POLICY_SOFTFAIL') then\n      return \"softfail\", 'string'\n    else\n      return \"none\", 'string'\n    end\n  end,\n  description = 'Get DMARC policy result'\n})\n\n-- Authentication alignment status\nlua_selectors.register_extractor(rspamd_config, \"auth_alignment\", {\n  get_value = function(task, args)\n    local results = {}\n    if task:has_symbol('R_SPF_ALLOW') then table.insert(results, \"spf\") end\n    if task:has_symbol('R_DKIM_ALLOW') then table.insert(results, \"dkim\") end\n    if task:has_symbol('DMARC_POLICY_ALLOW') then table.insert(results, \"dmarc\") end\n    \n    if #results > 0 then\n      return table.concat(results, \",\"), 'string'\n    else\n      return \"none\", 'string'\n    end\n  end,\n  description = 'Get authentication alignment summary'\n})\n"})}),"\n",(0,a.jsx)(n.h4,{id:"step-2-use-custom-selectors-in-clickhouse-configuration",children:"Step 2: Use Custom Selectors in ClickHouse Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["After registering the selectors, use them in your ClickHouse configuration in ",(0,a.jsx)(n.code,{children:"/etc/rspamd/local.d/clickhouse.conf"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-hcl",children:'extra_columns = {\n  # Built-in selectors (available by default)\n  "message_size" = "size";\n  "from_domain" = "from:domain";\n  \n  # Your custom selectors (names must match what you registered!)\n  "attachment_count" = "attachment_count()";          # Uses attachment_count selector\n  "has_executable" = "has_dangerous_attachment()";    # Uses has_dangerous_attachment selector\n  "attachment_extensions" = "attachment_types()";     # Uses attachment_types selector\n  "suspicious_url_count" = "suspicious_domains_count()"; # Uses suspicious_domains_count selector\n  "text_html_ratio" = "text_to_html_ratio()";        # Uses text_to_html_ratio selector\n  "language_detection" = "detected_languages()";     # Uses detected_languages selector\n  "symbol_groups_summary" = "symbol_groups_stats()"; # Uses symbol_groups_stats selector\n  \n  # Authentication results (custom selectors)\n  "spf_result" = "spf_result()";                      # Uses spf_result selector\n  "dkim_result" = "dkim_result()";                    # Uses dkim_result selector\n  "dmarc_result" = "dmarc_result()";                  # Uses dmarc_result selector\n  "auth_summary" = "auth_alignment()";                # Uses auth_alignment selector\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"step-3-restart-and-verify",children:"Step 3: Restart and Verify"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Restart Rspamd to load new selectors\nsudo systemctl restart rspamd\n\n# Verify selectors are loaded\nrspamadm configtest\n\n# Test a custom selector directly\necho "test" | rspamc --header="Subject: Test" | grep -i attachment\n'})}),"\n",(0,a.jsx)(n.h4,{id:"step-4-check-clickhouse-table-structure",children:"Step 4: Check ClickHouse Table Structure"}),"\n",(0,a.jsx)(n.p,{children:"After Rspamd creates the table, verify your custom columns are included:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'clickhouse-client --database=rspamd --query="DESCRIBE TABLE rspamd" | grep -E "(attachment|language|suspicious)"\n'})}),"\n",(0,a.jsx)(n.p,{children:"You should see columns like:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"attachment_count String"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"has_executable String"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"attachment_extensions String"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"suspicious_url_count String"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"text_html_ratio String"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"language_detection String"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"symbol_groups_summary String"})}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"step-5-query-your-custom-data",children:"Step 5: Query Your Custom Data"}),"\n",(0,a.jsx)(n.p,{children:"Now you can use your custom columns in analytics queries:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Analyze attachment threats\nSELECT \n    attachment_extensions,\n    count() as Messages,\n    countIf(has_executable = '1') as Dangerous_Count\nFROM rspamd \nWHERE toUInt32(attachment_count) > 0\nGROUP BY attachment_extensions\nORDER BY Dangerous_Count DESC;\n\n-- Language-based spam analysis\nSELECT \n    language_detection,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score\nFROM rspamd \nWHERE language_detection != ''\nGROUP BY language_detection\nORDER BY Avg_Score DESC;\n\n-- Authentication results analysis\nSELECT \n    spf_result,\n    dkim_result,\n    dmarc_result,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score,\n    countIf(Action = 'reject') as Rejected\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY spf_result, dkim_result, dmarc_result\nORDER BY Messages DESC;\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Key Points:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Selector names in ",(0,a.jsx)(n.code,{children:"rspamd.local.lua"})," must match those used in ",(0,a.jsx)(n.code,{children:"clickhouse.conf"})]}),"\n",(0,a.jsx)(n.li,{children:"All custom selectors return string values to ClickHouse"}),"\n",(0,a.jsx)(n.li,{children:"Restart Rspamd after adding new selectors"}),"\n",(0,a.jsx)(n.li,{children:"Custom columns appear automatically in the ClickHouse table"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"advanced-analytics-queries",children:"Advanced Analytics Queries"}),"\n",(0,a.jsx)(n.h3,{id:"mail-volume-analysis",children:"Mail Volume Analysis"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Daily mail volume by action\nSELECT \n    Date,\n    Action,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score\nFROM rspamd \nWHERE Date >= today() - 30\nGROUP BY Date, Action\nORDER BY Date DESC, Action;\n\n-- Hourly patterns\nSELECT \n    toHour(DateTime) as Hour,\n    Action,\n    count() as Messages\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY Hour, Action\nORDER BY Hour, Action;\n\n-- Top sender domains\nSELECT \n    domain(Sender) as Domain,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score,\n    countIf(Action = 'reject') as Rejected\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY Domain\nHAVING Messages > 100\nORDER BY Messages DESC\nLIMIT 20;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"spam-detection-effectiveness",children:"Spam Detection Effectiveness"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Spam detection rates by score ranges\nSELECT \n    multiIf(\n        Score < 0, 'Ham (< 0)',\n        Score < 5, 'Suspicious (0-5)',\n        Score < 15, 'Likely Spam (5-15)',\n        'Spam (> 15)'\n    ) as Score_Range,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score,\n    round(count() / (SELECT count() FROM rspamd WHERE Date >= today() - 7) * 100, 2) as Percentage\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY Score_Range\nORDER BY Avg_Score;\n\n-- Symbol effectiveness analysis\nSELECT \n    Symbol,\n    count() as Triggered,\n    round(avg(Score), 2) as Avg_Score,\n    round(avg(arrayFirst(x -> x, Symbols_Scores)), 2) as Symbol_Score\nFROM rspamd \nARRAY JOIN Symbols as Symbol, Symbols_Scores\nWHERE Date >= today() - 30 AND Action IN ('reject', 'add header')\nGROUP BY Symbol\nHAVING Triggered > 1000\nORDER BY Triggered DESC\nLIMIT 30;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"threat-intelligence",children:"Threat Intelligence"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Suspicious IP analysis\nSELECT \n    IP,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score,\n    countIf(Action = 'reject') as Rejected,\n    countIf(Action = 'accept') as Accepted,\n    round(countIf(Action = 'reject') / count() * 100, 2) as Reject_Rate\nFROM rspamd \nWHERE Date >= today() - 30\nGROUP BY IP\nHAVING Messages > 50 AND Reject_Rate > 80\nORDER BY Messages DESC\nLIMIT 50;\n\n-- Phishing and malware detection\nSELECT \n    Date,\n    countIf(has(Symbols, 'PHISHING')) as Phishing,\n    countIf(has(Symbols, 'MALWARE')) as Malware,\n    countIf(has(Symbols, 'DMARC_POLICY_REJECT')) as DMARC_Fails\nFROM rspamd \nWHERE Date >= today() - 30\nGROUP BY Date\nORDER BY Date DESC;\n\n-- Authentication failures by domain\nSELECT \n    domain(Sender) as Domain,\n    count() as Total_Messages,\n    countIf(spf_result = 'fail') as SPF_Failures,\n    countIf(dkim_result = 'fail') as DKIM_Failures,\n    countIf(dmarc_result = 'reject') as DMARC_Rejections,\n    round(countIf(spf_result = 'fail') / count() * 100, 2) as SPF_Fail_Rate,\n    round(countIf(dmarc_result = 'reject') / count() * 100, 2) as DMARC_Reject_Rate\nFROM rspamd \nWHERE Date >= today() - 30\nGROUP BY Domain\nHAVING Total_Messages > 50\nORDER BY DMARC_Reject_Rate DESC, SPF_Fail_Rate DESC\nLIMIT 50;\n\n-- Authentication success rates\nSELECT \n    Date,\n    countIf(auth_summary LIKE '%spf%') as SPF_Pass,\n    countIf(auth_summary LIKE '%dkim%') as DKIM_Pass,\n    countIf(auth_summary LIKE '%dmarc%') as DMARC_Pass,\n    countIf(auth_summary = 'none') as No_Auth,\n    count() as Total_Messages\nFROM rspamd \nWHERE Date >= today() - 30\nGROUP BY Date\nORDER BY Date DESC;\n\n-- Geographic threat analysis (if GeoIP enabled)\nSELECT \n    extractAll(arrayStringConcat(Symbols), 'COUNTRY_([A-Z]{2})')[1] as Country,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score,\n    countIf(Action = 'reject') as Rejected\nFROM rspamd \nWHERE Date >= today() - 7 AND Country != ''\nGROUP BY Country\nHAVING Messages > 100\nORDER BY Rejected DESC\nLIMIT 20;\n\n-- Custom selector analysis - Attachment threats\nSELECT \n    Date,\n    attachment_extensions,\n    count() as Messages,\n    countIf(has_executable = '1') as Dangerous_Attachments,\n    countIf(Action = 'reject') as Rejected,\n    round(avg(Score), 2) as Avg_Score\nFROM rspamd \nWHERE Date >= today() - 7 AND attachment_count != '0'\nGROUP BY Date, attachment_extensions\nHAVING Messages > 10\nORDER BY Dangerous_Attachments DESC, Rejected DESC\nLIMIT 30;\n\n-- Language detection and spam correlation\nSELECT \n    language_detection,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score,\n    countIf(Action = 'reject') as Rejected,\n    round(countIf(Action = 'reject') / count() * 100, 2) as Reject_Rate\nFROM rspamd \nWHERE Date >= today() - 30 AND language_detection != ''\nGROUP BY language_detection\nHAVING Messages > 100\nORDER BY Reject_Rate DESC\nLIMIT 20;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Scan time analysis\nSELECT \n    multiIf(\n        Scan_Time < 0.1, '< 100ms',\n        Scan_Time < 0.5, '100-500ms',\n        Scan_Time < 1.0, '500ms-1s',\n        Scan_Time < 2.0, '1-2s',\n        '> 2s'\n    ) as Scan_Time_Range,\n    count() as Messages,\n    round(avg(Scan_Time), 3) as Avg_Scan_Time\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY Scan_Time_Range\nORDER BY Avg_Scan_Time;\n\n-- Message size vs scan time correlation\nSELECT \n    multiIf(\n        Size < 10240, '< 10KB',\n        Size < 102400, '10-100KB',\n        Size < 1048576, '100KB-1MB',\n        Size < 10485760, '1-10MB',\n        '> 10MB'\n    ) as Size_Range,\n    count() as Messages,\n    round(avg(Scan_Time), 3) as Avg_Scan_Time,\n    round(avg(Size / 1024), 2) as Avg_Size_KB\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY Size_Range\nORDER BY Avg_Size_KB;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"building-dashboards",children:"Building Dashboards"}),"\n",(0,a.jsx)(n.h3,{id:"grafana-integration",children:"Grafana Integration"}),"\n",(0,a.jsx)(n.p,{children:"Install and configure Grafana with ClickHouse:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Install Grafana\nsudo apt-get install -y software-properties-common\nsudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install grafana\n\n# Start Grafana\nsudo systemctl start grafana-server\nsudo systemctl enable grafana-server\n\n# Install ClickHouse plugin\nsudo grafana-cli plugins install grafana-clickhouse-datasource\nsudo systemctl restart grafana-server\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dashboard-configuration",children:"Dashboard Configuration"}),"\n",(0,a.jsx)(n.p,{children:"Create Grafana dashboard panels:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Rspamd Mail Analytics",\n    "panels": [\n      {\n        "title": "Daily Mail Volume",\n        "type": "graph",\n        "targets": [\n          {\n            "rawSql": "SELECT Date, Action, count() as Messages FROM rspamd WHERE Date >= today() - 30 GROUP BY Date, Action ORDER BY Date",\n            "format": "time_series"\n          }\n        ]\n      },\n      {\n        "title": "Top Rejected IPs",\n        "type": "table",\n        "targets": [\n          {\n            "rawSql": "SELECT IP, count() as Messages, round(avg(Score), 2) as Avg_Score FROM rspamd WHERE Date >= today() - 7 AND Action = \'reject\' GROUP BY IP ORDER BY Messages DESC LIMIT 20"\n          }\n        ]\n      },\n      {\n        "title": "Spam Score Distribution",\n        "type": "histogram",\n        "targets": [\n          {\n            "rawSql": "SELECT Score FROM rspamd WHERE Date >= today() - 7"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"real-time-monitoring",children:"Real-time Monitoring"}),"\n",(0,a.jsx)(n.p,{children:"Create real-time monitoring queries:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Real-time spam detection (last hour)\nSELECT \n    toStartOfMinute(DateTime) as Time,\n    count() as Messages,\n    countIf(Action = 'reject') as Rejected\nFROM rspamd \nWHERE DateTime >= now() - INTERVAL 1 HOUR\nGROUP BY Time\nORDER BY Time;\n\n-- Active threats (last 15 minutes)\nSELECT \n    IP,\n    count() as Messages,\n    round(avg(Score), 2) as Avg_Score\nFROM rspamd \nWHERE DateTime >= now() - INTERVAL 15 MINUTE AND Score > 10\nGROUP BY IP\nHAVING Messages > 5\nORDER BY Messages DESC;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"custom-analytics-functions",children:"Custom Analytics Functions"}),"\n",(0,a.jsx)(n.p,{children:"Create custom analytics functions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- User-defined function for spam probability\nCREATE FUNCTION spam_probability AS (score) -> \n    multiIf(\n        score < 0, 0,\n        score > 15, 1,\n        score / 15\n    );\n\n-- Use in queries\nSELECT \n    Date,\n    round(avg(spam_probability(Score)), 3) as Avg_Spam_Probability\nFROM rspamd \nWHERE Date >= today() - 30\nGROUP BY Date\nORDER BY Date;\n\n-- Threat score calculation\nCREATE FUNCTION threat_score AS (ip_messages, avg_score, reject_rate) ->\n    (ip_messages / 1000) * avg_score * (reject_rate / 100);\n\nSELECT \n    IP,\n    threat_score(count(), avg(Score), countIf(Action = 'reject') / count() * 100) as Threat_Score\nFROM rspamd \nWHERE Date >= today() - 7\nGROUP BY IP\nHAVING count() > 10\nORDER BY Threat_Score DESC\nLIMIT 20;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"machine-learning-integration",children:"Machine Learning Integration"}),"\n",(0,a.jsx)(n.p,{children:"Integrate with ML platforms:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Export data for ML training\nSELECT \n    Symbols,\n    Symbols_Scores,\n    Size,\n    multiIf(Score < 5, 0, Score > 15, 1, 0.5) as Label\nFROM rspamd \nWHERE Date >= today() - 90\nFORMAT CSV;\n\n-- Feature engineering for spam detection\nSELECT \n    -- Basic features\n    Size,\n    length(Subject) as Subject_Length,\n    Recipient_Count,\n    \n    -- Symbol features\n    has(Symbols, 'SPF_FAIL') as Has_SPF_Fail,\n    has(Symbols, 'DKIM_INVALID') as Has_DKIM_Invalid,\n    has(Symbols, 'BAYES_SPAM') as Has_Bayes_Spam,\n    \n    -- Aggregated features\n    length(Symbols) as Symbol_Count,\n    arraySum(Symbols_Scores) as Total_Symbol_Score,\n    \n    -- Target\n    multiIf(Action = 'reject', 1, Action = 'accept', 0, 0.5) as Label\n    \nFROM rspamd \nWHERE Date >= today() - 30\nORDER BY DateTime DESC;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"alerting-and-monitoring",children:"Alerting and Monitoring"}),"\n",(0,a.jsx)(n.p,{children:"Set up automated alerts:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Detect spam waves\nSELECT \n    'Spam Wave Detected' as Alert_Type,\n    count() as Messages,\n    any(DateTime) as First_Seen\nFROM rspamd \nWHERE DateTime >= now() - INTERVAL 10 MINUTE \n    AND Action = 'reject'\nHAVING Messages > 100;\n\n-- Detect unusual sender patterns\nWITH sender_stats AS (\n    SELECT \n        domain(Sender) as Domain,\n        count() as Messages,\n        avg(Score) as Avg_Score\n    FROM rspamd \n    WHERE DateTime >= now() - INTERVAL 1 HOUR\n    GROUP BY Domain\n    HAVING Messages > 50\n)\nSELECT \n    'Suspicious Sender Domain' as Alert_Type,\n    Domain,\n    Messages,\n    round(Avg_Score, 2) as Score\nFROM sender_stats \nWHERE Avg_Score > 10\nORDER BY Messages DESC;\n\n-- Performance degradation detection\nSELECT \n    'Performance Issue' as Alert_Type,\n    round(avg(Scan_Time), 3) as Avg_Scan_Time,\n    count() as Messages\nFROM rspamd \nWHERE DateTime >= now() - INTERVAL 5 MINUTE\nHAVING Avg_Scan_Time > 2.0;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,a.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(n.p,{children:"Optimize ClickHouse for production:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Optimize table structure\nOPTIMIZE TABLE rspamd FINAL;\n\n-- Create additional indexes for common queries\nALTER TABLE rspamd ADD INDEX idx_score Score TYPE minmax GRANULARITY 8192;\nALTER TABLE rspamd ADD INDEX idx_symbols Symbols TYPE bloom_filter GRANULARITY 8192;\n\n-- Partition management\nSELECT \n    partition,\n    count() as rows,\n    formatReadableSize(sum(bytes_on_disk)) as size\nFROM system.parts \nWHERE table = 'rspamd' AND active\nGROUP BY partition\nORDER BY partition DESC;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"data-retention-policies",children:"Data Retention Policies"}),"\n",(0,a.jsx)(n.p,{children:"Implement data lifecycle management:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Create tiered storage (if using ClickHouse Cloud)\nALTER TABLE rspamd MODIFY TTL \n    Date + INTERVAL 7 DAY TO DISK 'hot',\n    Date + INTERVAL 30 DAY TO DISK 'cold',\n    Date + INTERVAL 90 DAY DELETE;\n\n-- Archive old data\nCREATE TABLE rspamd_archive AS rspamd \nENGINE = MergeTree()\nORDER BY Date;\n\n-- Move old data to archive\nINSERT INTO rspamd_archive \nSELECT * FROM rspamd \nWHERE Date < today() - 365;\n\n-- Delete archived data from main table\nALTER TABLE rspamd DELETE \nWHERE Date < today() - 365;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"backup-and-recovery",children:"Backup and Recovery"}),"\n",(0,a.jsx)(n.p,{children:"Set up backup procedures:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# clickhouse_backup.sh\n\nBACKUP_DIR="/backup/clickhouse"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p "$BACKUP_DIR/$DATE"\n\n# Backup schema\nclickhouse-client --query="SHOW CREATE TABLE rspamd.rspamd" > "$BACKUP_DIR/$DATE/schema.sql"\n\n# Backup data (last 30 days)\nclickhouse-client --query="SELECT * FROM rspamd.rspamd WHERE Date >= today() - 30 FORMAT Native" > "$BACKUP_DIR/$DATE/data.native"\n\n# Compress backup\ntar -czf "$BACKUP_DIR/rspamd_backup_$DATE.tar.gz" -C "$BACKUP_DIR" "$DATE"\nrm -rf "$BACKUP_DIR/$DATE"\n\n# Cleanup old backups (keep 30 days)\nfind "$BACKUP_DIR" -name "rspamd_backup_*.tar.gz" -mtime +30 -delete\n'})}),"\n",(0,a.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,a.jsx)(n.p,{children:"Secure your ClickHouse installation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"\x3c!-- /etc/clickhouse-server/config.d/network.xml --\x3e\n<yandex>\n    <listen_host>127.0.0.1</listen_host>\n    \x3c!-- Only allow local connections for security --\x3e\n    \n    \x3c!-- If you need remote access, use proper authentication --\x3e\n    \x3c!-- <listen_host>0.0.0.0</listen_host> --\x3e\n</yandex>\n"})}),"\n",(0,a.jsx)(n.p,{children:"For production environments with remote access:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"\x3c!-- /etc/clickhouse-server/users.d/rspamd.xml --\x3e\n<yandex>\n    <users>\n        <rspamd_user>\n            <password_sha256_hex>your_secure_password_hash</password_sha256_hex>\n            <networks>\n                <ip>127.0.0.1</ip>\n                <ip>10.0.0.0/8</ip>\n                \x3c!-- Add your network ranges --\x3e\n            </networks>\n            <profile>default</profile>\n            <quota>default</quota>\n            <databases>\n                <database>rspamd</database>\n            </databases>\n        </rspamd_user>\n    </users>\n</yandex>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Connection problems"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Check ClickHouse status\nsudo systemctl status clickhouse-server\n\n# Test connection\nclickhouse-client --query="SELECT 1"\n\n# Check Rspamd logs\ngrep -i clickhouse /var/log/rspamd/rspamd.log\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Performance issues"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Check query performance\nSELECT query, elapsed FROM system.query_log \nWHERE type = 'QueryFinish' \nORDER BY elapsed DESC \nLIMIT 10;\n\n-- Monitor resource usage\nSELECT * FROM system.metrics \nWHERE metric LIKE '%Memory%' OR metric LIKE '%CPU%';\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Data consistency"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Check for missing data\nSELECT Date, count() as Messages \nFROM rspamd \nWHERE Date >= today() - 7 \nGROUP BY Date \nORDER BY Date;\n\n-- Verify table integrity\nCHECK TABLE rspamd;\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This comprehensive guide provides everything needed to build a powerful mail analytics platform using ClickHouse with Rspamd."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);