"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[7954],{8453:(s,e,n)=>{n.d(e,{R:()=>t,x:()=>o});var i=n(6540);const a={},r=i.createContext(a);function t(s){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof s?s(e):{...e,...s}},[e,s])}function o(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(a):s.components||a:t(s.components),i.createElement(r.Provider,{value:e},s.children)}},8706:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"modules/spamassassin","title":"SpamAssassin rules module","description":"This module is intended to enable the adoption and reading of SpamAssassin rules within Rspamd.","source":"@site/docs/modules/spamassassin.md","sourceDirName":"modules","slug":"/modules/spamassassin","permalink":"/docs.rspamd.com/branches/master/ru/modules/spamassassin","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/modules/spamassassin.md","tags":[],"version":"current","frontMatter":{"title":"SpamAssassin rules module"},"sidebar":"docs","previous":{"title":"Rspamd update module","permalink":"/docs.rspamd.com/branches/master/ru/modules/rspamd_update"},"next":{"title":"Spamtrap module","permalink":"/docs.rspamd.com/branches/master/ru/modules/spamtrap"}}');var a=n(4848),r=n(8453);const t={title:"SpamAssassin rules module"},o="SpamAssassin rules module",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Limitations and principles of work",id:"limitations-and-principles-of-work",level:2}];function p(s){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...s.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"spamassassin-rules-module",children:"SpamAssassin rules module"})}),"\n",(0,a.jsx)(e.p,{children:"This module is intended to enable the adoption and reading of SpamAssassin rules within Rspamd."}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"SpamAssassin offers a comprehensive set of rules that prove useful in low-volume environments.\nThe purpose of this plugin is to integrate these rules seamlessly into Rspamd. The configuration\nprocess for this plugin is straightforward. All you need to do is compile your SpamAssassin rules\ninto a single file and feed it to the SpamAssassin module:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-hcl",children:'spamassassin {\n\truleset = "/path/to/file";\n\tbase_ruleset = "/var/db/spamassassin/3.004002/updates_spamassassin_org/*.cf";\n\t# Limit search size to 100 kilobytes for all regular expressions\n\tmatch_limit = 100k;\n\t# Those regexp atoms will not be passed through hyperscan:\n\tpcre_only = ["RULE1", "__RULE2"];\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"Rspamd has the capability to read several files containing SpamAssassin rules, and it\nalso supports glob patterns. All rules are parsed into a uniform structure, which means\nthat if an individual rule occurs multiple times, it may be overwritten."}),"\n",(0,a.jsx)(e.h2,{id:"limitations-and-principles-of-work",children:"Limitations and principles of work"}),"\n",(0,a.jsxs)(e.p,{children:["Rspamd tries to optimize SA rules quite aggressively. Some of that optimizations\nare described in the following ",(0,a.jsx)(e.a,{href:"https://highsecure.ru/ast-rspamd.pdf",children:"presentation"}),".\nTo achieve this objective, Rspamd treats all rules as ",(0,a.jsx)(e.code,{children:"expression atoms"}),". While meta\nrules are considered as ",(0,a.jsx)(e.strong,{children:"real"})," Rspamd rules that possess their symbol and score,\nother rules are typically concealed. Nevertheless, it is possible to specify a minimum\nscore required for a rule to be treated as a normal rule."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"alpha = 0.1\n"})}),"\n",(0,a.jsxs)(e.p,{children:["By configuring the ",(0,a.jsx)(e.code,{children:"spamassassin"})," section in this manner, all rules with scores greater\nthan ",(0,a.jsx)(e.code,{children:"0.1"})," will be regarded as full-fledged rules, and evaluated accordingly. (Do note,\nhowever, that ",(0,a.jsx)(e.code,{children:"alpha"})," will not be applicable to rules lacking a ",(0,a.jsx)(e.code,{children:"score"})," line in the file.)"]}),"\n",(0,a.jsx)(e.p,{children:"At present, Rspamd boasts the following functions:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"body, rawbody, meta, header, uri and other rules"}),"\n",(0,a.jsxs)(e.li,{children:["some header functions, such as ",(0,a.jsx)(e.code,{children:"exists"})]}),"\n",(0,a.jsx)(e.li,{children:"some eval functions"}),"\n",(0,a.jsxs)(e.li,{children:["some plugins:\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::FreeMail',"}),"\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::HeaderEval',"}),"\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::ReplaceTags',"}),"\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::RelayEval',"}),"\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::MIMEEval',"}),"\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::BodyEval',"}),"\n",(0,a.jsx)(e.li,{children:"'Mail::SpamAssassin::Plugin::MIMEHeader'"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["As of now, Rspamd does ",(0,a.jsx)(e.strong,{children:"not"})," offer support for network plugins, HTML plugins, and some other plugins.\nHowever, this features are planned  to incorporate these features in upcoming releases of Rspamd."]}),"\n",(0,a.jsx)(e.p,{children:"Despite these limitations, the majority of SpamAssassin rules can be utilized in Rspamd,\nrendering the transition process far more seamless for users who opt to switch from SpamAssassin to Rspamd."}),"\n",(0,a.jsx)(e.p,{children:'The overall performance of Rspamd is somewhat diminished when processing SpamAssassin rules,\nas these rules incorporate numerous inefficient regular expressions that scour through voluminous\ntext bodies. Nevertheless, the optimizations implemented by Rspamd can markedly reduce the workload\nrequired to process SpamAssassin rules. Furthermore, if the PCRE library is constructed with\nJIT support, Rspamd can gain a substantial boost in performance. Upon launching, Rspamd indicates\nwhether JIT compilation is available and issues a warning if it is not. It is worth noting that certain\nregular expressions might benefit from "hyperscan" support, which is accessible on x86_64 platforms\nas of Rspamd version 1.1.'}),"\n",(0,a.jsxs)(e.p,{children:["The SpamAssassin plugin is implemented in Lua and encompasses numerous functional components.\nAs a result, to enhance its speed, one may wish to compile Rspamd with ",(0,a.jsx)(e.a,{href:"https://luajit.org",children:"luajit"}),",\na high-speed engine that approaches the speed of standard C. Since Rspamd version 0.9, LuaJIT has been\nenabled by default."]})]})}function c(s={}){const{wrapper:e}={...(0,r.R)(),...s.components};return e?(0,a.jsx)(e,{...s,children:(0,a.jsx)(p,{...s})}):p(s)}}}]);