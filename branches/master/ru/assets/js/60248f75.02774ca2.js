"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[8345],{3616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"configuration/selectors","title":"Selectors","description":"Rspamd selectors is a Lua framework that allows functional extraction and processing of data from messages.","source":"@site/docs/configuration/selectors.md","sourceDirName":"configuration","slug":"/configuration/selectors","permalink":"/docs.rspamd.com/branches/master/ru/configuration/selectors","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/configuration/selectors.md","tags":[],"version":"current","frontMatter":{"title":"Selectors"},"sidebar":"docs","previous":{"title":"Rspamd maps","permalink":"/docs.rspamd.com/branches/master/ru/configuration/maps"},"next":{"title":"Statistics settings","permalink":"/docs.rspamd.com/branches/master/ru/configuration/statistic"}}');var l=n(4848),i=n(8453);const r={title:"Selectors"},d="Rspamd selectors settings",c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Selectors syntax",id:"selectors-syntax",level:2},{value:"Operators: &#39;:&#39; vs &#39;.&#39; (order matters)",id:"operators--vs--order-matters",level:3},{value:"Data transformation method",id:"data-transformation-method",level:3},{value:"Null values",id:"null-values",level:3},{value:"Selectors combinations",id:"selectors-combinations",level:2},{value:"Data definition functions",id:"data-definition-functions",level:2},{value:"Transformation functions",id:"transformation-functions",level:2},{value:"Maps in transformations",id:"maps-in-transformations",level:3},{value:"Type safety",id:"type-safety",level:2},{value:"Common pitfalls",id:"common-pitfalls",level:2},{value:"Own selectors",id:"own-selectors",level:2},{value:"Regular expressions selectors",id:"regular-expressions-selectors",level:2}];function a(e){const t={a:"a",center:"center",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"rspamd-selectors-settings",children:"Rspamd selectors settings"})}),"\n",(0,l.jsx)(t.p,{children:"Rspamd selectors is a Lua framework that allows functional extraction and processing of data from messages."}),"\n",(0,l.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsx)(t.center,{children:(0,l.jsx)(t.img,{className:"img-fluid",src:"/img/selectors.png",width:"50%"})}),"\n",(0,l.jsx)(t.p,{children:"Starting from version 1.8, Rspamd introduces a framework designed for data extraction from messages and its subsequent utilization in plugins via transform functions. This functionality allows for a variety of operations. For instance, you can retrieve the SMTP from address and convert it to lowercase using the following selector:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"smtp_from.lower\n"})}),"\n",(0,l.jsx)(t.p,{children:"Similarly, you can obtain a lowercased digest of the subject and then truncate it to 16 hexadecimal characters:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"header('Subject').lower.digest('hex').substring(1, 16)\n"})}),"\n",(0,l.jsx)(t.p,{children:"Additionally, you have the capability to work with lists, such as lists of URLs:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"urls:get_tld\n"})}),"\n",(0,l.jsx)(t.p,{children:"Afterwards, these values can be used in various plugins:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"/modules/multimap",children:(0,l.jsx)(t.code,{children:"multimap"})})," - map type equal to ",(0,l.jsx)(t.code,{children:"selector"})]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"/modules/ratelimit",children:(0,l.jsx)(t.code,{children:"ratelimit"})})," - rate bucket description with ",(0,l.jsx)(t.code,{children:"selector"})," field"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"/modules/reputation",children:(0,l.jsx)(t.code,{children:"reputation"})})," - generic selector rules"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"/modules/regexp",children:(0,l.jsx)(t.code,{children:"regexp"})})," - regular expressions based on selector's data"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"/modules/rbl",children:(0,l.jsx)(t.code,{children:"rbl"})})," - allows selectors in data queries"]}),"\n",(0,l.jsxs)(t.li,{children:["[",(0,l.jsx)(t.code,{children:"clustering"}),"] - TBD"]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Here is an example of Rspamd multimap rule that uses selectors to block bad Sendgrid senders using ",(0,l.jsx)(t.a,{href:"https://www.invaluement.com/serviceproviderdnsbl/",children:"Invaluement SPBL"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-hcl",children:'# local.d/multimap.conf\nINVALUEMENT_SENDGRID_ID {\n  type = "selector";\n  selector = \'header("X-SG-EID").id;from("smtp","orig").regexp("/^<?bounces\\+(\\d+)\\-[^@]+@/i").last\';\n  map = "https://www.invaluement.com/spdata/sendgrid-id-dnsbl.txt";\n  score = 6.0;\n}\n\nINVALUEMENT_SENDGRID_DOMAIN {\n  type = "selector";\n  map = "https://www.invaluement.com/spdata/sendgrid-envelopefromdomain-dnsbl.txt";\n  selector = \'header("X-SG-EID").id;from("smtp","orig"):domain.get_tld\';\n  score = 6.0;\n}\n'})}),"\n",(0,l.jsx)(t.p,{children:"As evident from this rule, it skillfully employs a combination of map expressions and selectors to retrieve and modify data for queries within maps."}),"\n",(0,l.jsx)(t.h2,{id:"selectors-syntax",children:"Selectors syntax"}),"\n",(0,l.jsx)(t.p,{children:"A selector typically consists of two key components:"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:["Data identification (such as ",(0,l.jsx)(t.code,{children:"header"})," or ",(0,l.jsx)(t.code,{children:"urls"}),")"]}),"\n",(0,l.jsxs)(t.li,{children:["An optional data transformation method, separated by a colon (",(0,l.jsx)(t.code,{children:":"}),")"]}),"\n",(0,l.jsxs)(t.li,{children:["A transformation pipeline, where multiple functions are linked with dot operators (",(0,l.jsx)(t.code,{children:"."}),")"]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Additionally, you can merge several selectors by using a semicolon (",(0,l.jsx)(t.code,{children:";"}),") as a delimiter:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"smtp_from.addr.lower;ip.addr\n"})}),"\n",(0,l.jsx)(t.p,{children:"Both the data identification and transformation functions allow the use of arguments separated by commas. To simplify escaping, single and double quotation marks are supported:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"header('Subject').regexp(\"^A-Z{10,}.*\")\nheader('Subject').regexp(\"^A-Z{10,}\\\"'.*\")\nheader('Subject').regexp('^A-Z{10,}\"\\'.*')\n"})}),"\n",(0,l.jsx)(t.h3,{id:"operators--vs--order-matters",children:"Operators: ':' vs '.' (order matters)"}),"\n",(0,l.jsx)(t.p,{children:"A selector has a strict order of parts:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"extractor [: method]"}),"\n",(0,l.jsx)(t.li,{children:"[. transform] [. transform] ..."}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"Key rules:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsxs)(t.strong,{children:[(0,l.jsx)(t.code,{children:":"})," (method) goes immediately after the extractor and can appear at most once."]})," It is used to access a field on a table or call a method on a userdata object returned by the extractor. If the extractor returns a list, the method is applied element-wise."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsxs)(t.strong,{children:[(0,l.jsx)(t.code,{children:"."})," (transform) chains after that"]})," and applies selector transforms (e.g. ",(0,l.jsx)(t.code,{children:"lower"}),", ",(0,l.jsx)(t.code,{children:"first"}),", ",(0,l.jsx)(t.code,{children:"regexp"}),", ...). Transforms generally work on simple types (",(0,l.jsx)(t.code,{children:"string"}),", ",(0,l.jsx)(t.code,{children:"string_list"}),") and many are also mapped over lists."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsxs)(t.strong,{children:["You cannot place ",(0,l.jsx)(t.code,{children:":"})," after you started ",(0,l.jsx)(t.code,{children:"."})," transforms."]})," The grammar allows the optional method only right after the extractor."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsxs)(t.strong,{children:["Names after ",(0,l.jsx)(t.code,{children:":"})," must be object fields/methods, not transforms."]})," Typical examples: ",(0,l.jsx)(t.code,{children:"from:addr"}),", ",(0,l.jsx)(t.code,{children:"from('mime'):name"}),", ",(0,l.jsx)(t.code,{children:"urls:get_tld"}),", ",(0,l.jsx)(t.code,{children:"ip:to_string"}),"."]}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"Examples:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["Works: ",(0,l.jsx)(t.code,{children:"from:addr.lower"})," \u2014 take MIME/SMTP From object, get its ",(0,l.jsx)(t.code,{children:"addr"})," field, then lowercase it."]}),"\n",(0,l.jsxs)(t.li,{children:["Works: ",(0,l.jsx)(t.code,{children:"rcpts:domain.first"})," \u2014 take list of recipients, get ",(0,l.jsx)(t.code,{children:"domain"})," for each, then take the first domain."]}),"\n",(0,l.jsxs)(t.li,{children:["Does NOT work: ",(0,l.jsx)(t.code,{children:"rcpts:first.domain"})," \u2014 ",(0,l.jsx)(t.code,{children:"first"})," is a transform (not a method), and ",(0,l.jsx)(t.code,{children:"domain"})," is a method (not a transform). Also, ",(0,l.jsx)(t.code,{children:":"})," can only appear right after the extractor."]}),"\n",(0,l.jsxs)(t.li,{children:["Does NOT work: ",(0,l.jsx)(t.code,{children:"from.lower:addr"})," \u2014 place the method before transforms: ",(0,l.jsx)(t.code,{children:"from:addr.lower"}),"."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"data-transformation-method",children:"Data transformation method"}),"\n",(0,l.jsx)(t.p,{children:"Certain data extractors yield intricate objects or lists of such objects, including:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"table"}),"\n",(0,l.jsx)(t.li,{children:"userdata (Lua object)"}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"To convert these complex entities into simpler ones (strings or string lists), there are two approaches: implicit conversion and employing the method or table key extraction."}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsxs)(t.li,{children:["\n",(0,l.jsxs)(t.p,{children:["For objects, implicit conversion involves invoking the ",(0,l.jsx)(t.code,{children:"tostring"})," function, while the method call is straightforward. The following are equivalent: ",(0,l.jsx)(t.code,{children:"ip:to_string.lower"})," and ",(0,l.jsx)(t.code,{children:"ip.lower"}),". Nevertheless, different methods of the objects can be called: ",(0,l.jsx)(t.code,{children:"urls:get_tld"})," will return a list of strings containing all eSLD parts of URLs in the message. An exception to this rule (starting from 2.7) is ",(0,l.jsx)(t.code,{children:"rspamd_text"}),", which can be traversed within the selector pipeline without any conversion. This exemption aims to retain large strings to prevent Lua string interning and excessive allocation."]}),"\n"]}),"\n",(0,l.jsxs)(t.li,{children:["\n",(0,l.jsxs)(t.p,{children:["For tables, explicit conversion simply extracts the specified key, such as ",(0,l.jsx)(t.code,{children:"from:addr"})," or ",(0,l.jsx)(t.code,{children:"from('mime'):name"}),". Implicit conversion is slightly more intricate:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["If the table contains a field named ",(0,l.jsx)(t.code,{children:"value"}),", it is used for implicit conversion."]}),"\n",(0,l.jsxs)(t.li,{children:["If not, and there is a field named ",(0,l.jsx)(t.code,{children:"addr"})," in the table, it is used for implicit conversion."]}),"\n",(0,l.jsxs)(t.li,{children:["If neither of the above conditions are met, ",(0,l.jsx)(t.code,{children:"table.concat(t, ' ')"})," is used for implicit conversion."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"null-values",children:"Null values"}),"\n",(0,l.jsxs)(t.p,{children:["If a data transformation function or ",(0,l.jsx)(t.strong,{children:"any"})," transform function returns ",(0,l.jsx)(t.code,{children:"nil"}),", the selector is entirely disregarded. This characteristic is employed in functions like ",(0,l.jsx)(t.code,{children:"in"})," and ",(0,l.jsx)(t.code,{children:"not_in"}),". An illustrative configuration for the ",(0,l.jsx)(t.code,{children:"ratelimit"})," module that combines the ",(0,l.jsx)(t.code,{children:"in"})," transformation with ",(0,l.jsx)(t.code,{children:"id"})," to exclude the original string is as follows:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"user_workdays = {\n    selector = \"user.lower;time('connect', '!%w').in(1, 2, 3, 4, 5).id('work')\";\n    bucket = \"10 / 1m\";\n};\nuser_weekends = {\n    selector = \"user.lower;time('connect', '!%w').in(6, 7).id('weekends')\";\n    bucket = \"1 / 1m\";\n};\n"})}),"\n",(0,l.jsxs)(t.p,{children:["In this example, during weekends, the ",(0,l.jsx)(t.code,{children:"user_workdays"})," selector will be entirely disregarded, and conversely, during working days, the ",(0,l.jsx)(t.code,{children:"user_weekends"})," selector will not be utilized."]}),"\n",(0,l.jsx)(t.h2,{id:"selectors-combinations",children:"Selectors combinations"}),"\n",(0,l.jsx)(t.p,{children:"In the previous example, the selector comprised multiple components:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"user.lower"})," - extracts the authenticated username and converts it to lowercase"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"time('connect', '!%w').in(6, 7).id('weekends')"})," - if the connection time falls within the specified range, it returns the string 'weekends'"]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["These two elements are separated by the ",(0,l.jsx)(t.code,{children:";"})," symbol. Modules will utilize these elements as a concatenated string, for instance, ",(0,l.jsx)(t.code,{children:"user@example.com:weekends"})," (the ",(0,l.jsx)(t.code,{children:":"})," symbol serves as a separator and is employed by the ratelimit module)."]}),"\n",(0,l.jsx)(t.p,{children:"However, what if you want to achieve the same functionality for, let's say, recipients:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"rcpt_weekends = {\n    selector = \"rcpts.take_n(5).lower;time('connect', '!%w').in(6, 7).id('weekends')\";\n    bucket = \"1 / 1m\";\n};\n"})}),"\n",(0,l.jsxs)(t.p,{children:["In this instance, we're taking up to ",(0,l.jsx)(t.code,{children:"5"})," recipients, extracting the address part, converting it to lowercase, and combining it with the string ",(0,l.jsx)(t.code,{children:"weekends"})," if the condition is met. When a list of elements is concatenated with a string, this string is appended (or prepended) to each element of the list, resulting in the following:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"rcpt1:weekends\nrcpt2:weekends\nrcpt3:weekends\n"})}),"\n",(0,l.jsx)(t.p,{children:"It also works if you want to add a prefix and a suffix:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"rcpt_weekends = {\n    selector = \"id('rcpt');rcpts:addr.take_n(5).lower;time('connect', '!%w').in(6, 7).id('weekends')\";\n    bucket = \"1 / 1m\";\n};\n"})}),"\n",(0,l.jsx)(t.p,{children:"This configuration will be transformed into:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"rcpt:rcpt1:weekends\nrcpt:rcpt2:weekends\nrcpt:rcpt3:weekends\n"})}),"\n",(0,l.jsx)(t.p,{children:"However, combining lists with different numbers of entries is not recommended \u2013 in this case, the shortest of the lists will be used:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"id('rcpt');rcpts.take_n(5).lower;urls.get_host.lower\n"})}),"\n",(0,l.jsx)(t.p,{children:"This will result in a list that might have up to 5 elements and will be concatenated with the prefix:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"rcpt:rcpt1:example.com\nrcpt:rcpt2:example2.com\nrcpt:rcpt3:example3.com\n"})}),"\n",(0,l.jsx)(t.h2,{id:"data-definition-functions",children:"Data definition functions"}),"\n",(0,l.jsx)(t.p,{children:"The data definition part specifies what needs to be extracted. Here is the list of methods currently supported by Rspamd:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Extraction method"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Version"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"asn"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get AS number (ASN module must be executed first)"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"attachments"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get list of all attachments digests"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"country"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get country (ASN module must be executed first)"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"digest"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get content digest"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"emails"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get list of all emails. If no arguments specified, returns list of url objects. Otherwise, calls a specific method, e.g. ",(0,l.jsx)(t.code,{children:"get_user"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"files"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get all attachments files"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"from"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get MIME or SMTP from (e.g. ",(0,l.jsx)(t.code,{children:"from('smtp')"})," or ",(0,l.jsx)(t.code,{children:"from('mime')"}),", uses any type by default)"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get header with the name that is expected as an argument. The optional second argument accepts list of flags:{::nomarkdown}",(0,l.jsxs)(t.ul,{children:[(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"full"}),": returns all headers with this name with all data (like task:get_header_full())"]}),(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"strong"}),": use case sensitive match when matching header's name"]})]}),"{:/}"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"helo"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get helo value"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"id"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Return value from function's argument or an empty string, For example, ",(0,l.jsx)(t.code,{children:"id('Something')"})," returns a string 'Something'"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"ip"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get source IP address"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"languages"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.9+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get languages met in a message"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"list"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns a list of values from its arguments or an empty list"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"messageid"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.6+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get message ID"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"pool_var"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get specific pool var. The first argument must be variable name, the second argument is optional and defines the type (string by default)"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"queueid"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.6+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get queue ID"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get MIME or SMTP rcpts (e.g. ",(0,l.jsx)(t.code,{children:"rcpts('smtp')"})," or ",(0,l.jsx)(t.code,{children:"rcpts('mime')"}),", uses any type by default)"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"received"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get list of received headers. If no arguments specified, returns list of tables. Otherwise, selects a specific element, e.g. ",(0,l.jsx)(t.code,{children:"by_hostname"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"request_header"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get specific HTTP request header. The first argument must be header name."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"symbol"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.6+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get symbol with the name that is expected as first argument. Returns the symbol table (like task:get_symbol())"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"time"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get task timestamp. The first argument is type:{::nomarkdown}",(0,l.jsxs)(t.ul,{children:[(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"connect"}),": connection timestamp (default)"]}),(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"message"}),": timestamp as defined by ",(0,l.jsx)(t.code,{children:"Date"})," header"]})]}),"{:/}The second argument is optional time format, see ",(0,l.jsx)(t.a,{href:"https://web.archive.org/web/20231130145520/https://pgl.yoyo.org/luai/i/os.date",children:"os.date"})," description"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"to"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get principal recipient"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"uid"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.6+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get ID of the task being processed"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"urls"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get list of all urls. If no arguments specified, returns list of url objects. Otherwise, calls a specific method, e.g. ",(0,l.jsx)(t.code,{children:"get_tld"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"user"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get authenticated user name"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"specific_urls"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get most specific URLs; accepts options (e.g. ",(0,l.jsx)(t.code,{children:"limit"}),", ",(0,l.jsx)(t.code,{children:"need_content"}),", ",(0,l.jsx)(t.code,{children:"exclude_flags"}),")"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"specific_urls_filter_map"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get most specific URLs filtered by a named map (from ",(0,l.jsx)(t.code,{children:"lua_selectors.maps"}),")"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"urls_filtered"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get URLs filtered by flags include/exclude"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"words"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Get words from text parts (",(0,l.jsx)(t.code,{children:"stem"}),", ",(0,l.jsx)(t.code,{children:"raw"}),", ",(0,l.jsx)(t.code,{children:"norm"}),", ",(0,l.jsx)(t.code,{children:"full"}),")"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"task_cache"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get value by key from task cache"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"scan_result"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get full scan result table (default or shadow)"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"metatokens"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get metatokens for a message as strings"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rspamd_hostname"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Get hostname of the filter server"})]})]})]}),"\n",(0,l.jsx)(t.h2,{id:"transformation-functions",children:"Transformation functions"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Transform method"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Version"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Example"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"append"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Appends a string or a strings list"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"from:addr.append(':tag')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"apply_map"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns a value from a named map or nil"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"id('key').apply_map(test_map)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"digest"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Create a digest from a string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Subject').digest('hex','sha256')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"drop_n"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns list without the first n elements"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.drop_n(1)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"equal"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Boolean equal; returns input or nil"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"user.equal('postmaster')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"filter_map"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Keep input if it exists in map"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"id('key').filter_map(test_map)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"first"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns the first element of a list"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.first"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"id"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Drop input, return arguments"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"time('connect','!%w').in(6,7).id('weekends')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"in"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Keep input if it is in args"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"from:domain.in('example.com','example.org')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"inverse"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns nil if input is non-empty"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"user.inverse('nouser')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"ipmask"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Apply mask to IP (v4/v6)"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"ip.ipmask(24)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"join"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Join strings with separator"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.take_n(3).join(',')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"last"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns the last element of a list"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.last"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"lower"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Lowercase string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"from:addr.lower"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"not_in"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Keep input if not in args"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"from:domain.not_in('bad.com')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"nth"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Returns n-th element"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.nth(2)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"prepend"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Prepend string(s)"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"from:addr.prepend('sender:')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"regexp"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Regexp matching"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Subject').regexp('/viagra/i')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"sort"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Sort strings lexicographically"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.sort"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"substring"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Extract substring"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Subject').substring(1,16)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"take_n"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"1.8+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Take first n elements"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:addr.take_n(5)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"to_ascii"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.6+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Replace non-ASCII bytes"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Subject').to_ascii('?')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"uniq"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"2.0+"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Unique elements (hash-based)"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"urls:get_tld.uniq"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"lower_utf8"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Lowercase UTF\u20118 string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Subject').lower_utf8"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"join_nth"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Join by chunks of N"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"list('a','b','c','d').join_nth(2,':')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"join_tables"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Join list of tables into strings"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Received','full').join_tables(' ')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"get_tld"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Extract eSLD from hostname string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rcpts:domain.get_tld"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"pack_numbers"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Pack list of numbers into string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"list('10','20').pack_numbers('I')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"filter_string_nils"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Remove 'nil' strings from list"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"list('a','nil','b').filter_string_nils"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"apply_methods"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Call methods on userdata; return results"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"urls.first.apply_methods('get_tld','get_host')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"filter_method"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Keep userdata where method is truthy"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"urls.filter_method('is_redirected')"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"except_map"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Keep input if it is NOT in map"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"id('key').except_map(test_map)"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"match"})}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"\u2014"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Alias of ",(0,l.jsx)(t.code,{children:"regexp"})]}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"header('Subject').match('/re/i')"})})]})]})]}),"\n",(0,l.jsx)(t.p,{children:"You can access the latest list of all selector functions and also test Rspamd selector pipelines through the integrated Web Interface. This provides you with a convenient way to explore and experiment with Rspamd's selector capabilities."}),"\n",(0,l.jsx)(t.h3,{id:"maps-in-transformations",children:"Maps in transformations"}),"\n",(0,l.jsxs)(t.p,{children:["Starting from version 2.0, Rspamd introduces support for using maps within selectors. This is achieved by incorporating maps into a designated ",(0,l.jsx)(t.code,{children:"lua_selectors.maps"})," table or by using the helper ",(0,l.jsx)(t.code,{children:"lua_selectors.add_map(name, map)"}),". The table should consist of name-value pairs where the ",(0,l.jsx)(t.code,{children:"name"})," represents the symbolic name of the map, which can be employed in extraction or transformation functions, and the ",(0,l.jsx)(t.code,{children:"value"})," is the output of ",(0,l.jsx)(t.code,{children:"lua_maps.map_add_from_ucl"}),". To illustrate this concept:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"local lua_selectors = require \"lua_selectors\"\nlocal lua_maps = require \"lua_maps\"\n\n-- Either assign directly to the maps table\nlua_selectors.maps.test_map = lua_maps.map_add_from_ucl({\n    'key value',\n    'key1 value1',\n    'key3 value1',\n  }, 'hash', 'test selectors maps')\n\n-- Or register via helper (equivalent)\nlua_selectors.add_map('test_map2', lua_maps.map_add_from_ucl({\n    'x 1',\n    'y 2',\n  }, 'hash', 'another selectors map'))\n\nlocal samples = {\n    [\"map filter\"] = {\n      selector = \"id('key').filter_map(test_map)\",\n      expect = {'key'}\n    },\n    [\"map apply\"] = {\n      selector = \"id('key').apply_map(test_map)\",\n      expect = {'value'}\n    },\n    [\"map filter list\"] = {\n      selector = \"list('key', 'key1', 'key2').filter_map(test_map)\",\n      expect = {'key', 'key1'}\n    },\n    [\"map apply list\"] = {\n      selector = \"list('key', 'key1', 'key2', 'key3').apply_map(test_map)\",\n      expect = {'value', 'value1', 'value1'}\n    },\n    [\"map apply list uniq\"] = {\n      selector = \"list('key', 'key1', 'key2', 'key3').apply_map(test_map).uniq\",\n      expect = {'value', 'value1'}\n    },\n}\n"})}),"\n",(0,l.jsx)(t.p,{children:"Available map-aware transforms:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"filter_map(map_name)"})," \u2013 keep input only if it exists in the named map"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"apply_map(map_name)"})," \u2013 replace input with the corresponding map value"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"except_map(map_name)"})," \u2013 keep input only if it does NOT exist in the named map"]}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"Map-aware extractors:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"specific_urls_filter_map(map_name, opts)"})," \u2013 extract most specific URLs filtered by the named map"]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"type-safety",children:"Type safety"}),"\n",(0,l.jsxs)(t.p,{children:["All selectors provide type safety controls. It means that Rspamd checks if types within pipeline match each other. For example, ",(0,l.jsx)(t.code,{children:"rcpts"})," extractor returns a list of addresses, and ",(0,l.jsx)(t.code,{children:"from"})," returns a single address. If you need to lowercase this address you need to convert it to a string as the first step. This could be done by getting a specific element of this address, e.g. ",(0,l.jsx)(t.code,{children:"from.addr"})," -> this returns a ",(0,l.jsx)(t.code,{children:"string"})," (you could also get ",(0,l.jsx)(t.code,{children:"from.name"})," to get a displayed name, for example). Each processor has its own list of the accepted types."]}),"\n",(0,l.jsxs)(t.p,{children:["However, even when dealing with recipients, where ",(0,l.jsx)(t.code,{children:"rcpt"})," generates a list of addresses, you can still employ the same pipeline, such as ",(0,l.jsx)(t.code,{children:"rcpts.addr.lower"}),". This versatility is possible because many processors can be functionally applied like a map:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"elt1 -> f(elt1) -> elt1'\nelt2 -> f(elt2) -> elt2'\nelt3 -> f(elt3) -> elt3'\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Hence, a list of elements of type ",(0,l.jsx)(t.code,{children:"t"})," undergoes an element-wise transformation using processor ",(0,l.jsx)(t.code,{children:"f"}),", creating a new list of type ",(0,l.jsx)(t.code,{children:"t1"})," (which can be the same as ",(0,l.jsx)(t.code,{children:"t"}),"). The length of the resulting list remains unchanged."]}),"\n",(0,l.jsx)(t.p,{children:"To enhance convenience, the ultimate values can be implicitly converted to their string representation. This is particularly applicable to URLs, email addresses, and IP addresses, all of which can be seamlessly converted to strings."}),"\n",(0,l.jsx)(t.p,{children:"In general, you need not be overly concerned about type safety unless you encounter actual type errors. This mechanism serves to safeguard the selectors framework from inadvertent user errors."}),"\n",(0,l.jsx)(t.h2,{id:"common-pitfalls",children:"Common pitfalls"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsxs)(t.strong,{children:["Mixing ",(0,l.jsx)(t.code,{children:":"})," and ",(0,l.jsx)(t.code,{children:"."})," order"]}),": ",(0,l.jsx)(t.code,{children:":"})," must be right after the extractor and only once. Use ",(0,l.jsx)(t.code,{children:"rcpts:domain.first"}),", not ",(0,l.jsx)(t.code,{children:"rcpts:first.domain"}),"."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Calling methods as transforms (or vice versa)"}),": ",(0,l.jsx)(t.code,{children:"domain"}),", ",(0,l.jsx)(t.code,{children:"addr"}),", ",(0,l.jsx)(t.code,{children:"name"}),", ",(0,l.jsx)(t.code,{children:"get_tld"}),", ",(0,l.jsx)(t.code,{children:"to_string"})," are methods/fields (use with ",(0,l.jsx)(t.code,{children:":"}),"). ",(0,l.jsx)(t.code,{children:"first"}),", ",(0,l.jsx)(t.code,{children:"last"}),", ",(0,l.jsx)(t.code,{children:"lower"}),", ",(0,l.jsx)(t.code,{children:"uniq"}),", ",(0,l.jsx)(t.code,{children:"regexp"})," are transforms (use with ",(0,l.jsx)(t.code,{children:"."}),")."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Forgetting to convert complex types"}),": If you need a string, either use a method (",(0,l.jsx)(t.code,{children:"from:addr"}),") or rely on implicit conversion where applicable. Transforms generally expect strings or lists of strings."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"List length mismatches when combining"}),": When combining multiple list selectors with ",(0,l.jsx)(t.code,{children:";"}),", the shortest list determines the number of results (see examples above)."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Nil semantics"}),": If any step returns ",(0,l.jsx)(t.code,{children:"nil"}),", the entire selector is ignored. Boolean-style transforms like ",(0,l.jsx)(t.code,{children:"in"}),"/",(0,l.jsx)(t.code,{children:"not_in"})," exploit this to include or exclude parts."]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"own-selectors",children:"Own selectors"}),"\n",(0,l.jsxs)(t.p,{children:["You have the option to incorporate your custom extractors and processing functions. However, it's crucial to implement this setup before utilizing these selectors in any other context. For instance, the execution of ",(0,l.jsx)(t.code,{children:"rspamd.local.lua"})," precedes the initialization of plugins, making it a secure location to register your functions. Here is a small example about how to register your own extractors and processors."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"local lua_selectors = require \"lua_selectors\" -- Import module\n\nlua_selectors.register_extractor(rspamd_config, \"get_something\", {\n  get_value = function(task, args) -- mandatory field\n    return task:get_something(),'string' -- result + type\n  end,\n  description = 'Sample extractor' -- optional\n})\n\nlua_selectors.register_processor(rspamd_config, \"append_string\", {\n  types = {['string'] = true}, -- accepted types\n  process = function(input, type, args)\n    return input .. table.concat(args or {}),'string' -- result + type\n  end,\n  map_type = 'string', -- can be used in map like invocation, always return 'string' type\n  description = 'Adds all arguments to the input string'\n})\n\n-- List processor example\nlua_selectors.register_transform(rspamd_config, \"take_second\", {\n  types = {['list'] = true}, -- accepted types\n  process = function(input, t)\n    return input[2],t:match('^(.*)_list$') -- second element and list type\n  end,\n  desctiption = 'Returns the second element of the list'\n})\n"})}),"\n",(0,l.jsx)(t.p,{children:"You can use these functions in your selectors subsequently."}),"\n",(0,l.jsx)(t.h2,{id:"regular-expressions-selectors",children:"Regular expressions selectors"}),"\n",(0,l.jsxs)(t.p,{children:["You can also leverage selectors with Rspamd's ",(0,l.jsx)(t.a,{href:"/modules/regexp",children:"regexp module"}),". This approach allows you to utilize the data extracted and processed by the selector framework to match it against various regular expressions."]}),"\n",(0,l.jsxs)(t.p,{children:["To start, you'll need to register a selector in the regexp module. You can achieve this by adding the following code to your ",(0,l.jsx)(t.code,{children:"rspamd.local.lua"})," file:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"rspamd_config:register_re_selector('test', 'user.lower;header(Subject).lower', ' ')\n"})}),"\n",(0,l.jsxs)(t.p,{children:["The first argument denotes the symbolic name of the selector, which you will subsequently use to reference it in regular expression rules. The second argument entails the selector in the usual syntax. The last argument, which is optional, designates the character used to concatenate the different selector parts. In this manner, the selector generates a value by joining the authenticated user and the ",(0,l.jsx)(t.code,{children:"Subject"})," header's value using a space character."]}),"\n",(0,l.jsx)(t.p,{children:"Following this, you can refer to this selector in your regular expression rules. The order in which you use the selector's name and its registration in the code doesn't impact its functionality."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"config['regexp']['TEST_SELECTOR_RE'] = {\n  re = 'test=/user some subject/$',\n  score = 100500,\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["The syntax for regular expressions involving selectors bears some resemblance to header regular expressions. You begin by stating the selector's name, followed by ",(0,l.jsx)(t.code,{children:"="})," and the actual regular expression, concluded with ",(0,l.jsx)(t.code,{children:"$"})," to signify the type. The omission of the ",(0,l.jsx)(t.code,{children:"$"})," sign alerts Rspamd that you are specifying a header regular expression, rather than a selector-based one. It is essential to include this symbol to ensure clarity. Alternatively, you can utilize the extended syntax for the re type:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"config['regexp']['TEST_SELECTOR_RE'] = {\n  re = 'test=/user some subject/{selector}',\n  score = 100500,\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["If a selector yields multiple values, such as recipients, the corresponding regular expression will be matched against all the elements within that list. Consequently, it becomes crucial to incorporate the ",(0,l.jsx)(t.code,{children:"one_shot"})," option to prevent inadvertent insertion of multiple symbols:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-lua",children:"rspamd_config:register_re_selector('test_rcpt', 'rcpts.addr.lower;header(Subject).lower', ' ')\nconfig['regexp']['TEST_SELECTOR_RCPT'] = {\n  re = 'test_rcpt=/user@example.com some subject/{selector}',\n  score = 100500,\n  one_shot = true,\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["It's noteworthy that data retrieved through selectors is internally cached, allowing you to safely reuse it across multiple regular expressions (in case of ",(0,l.jsx)(t.code,{children:"Hyperscan"})," support multiple regular expressions will also be composed as usually)."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var s=n(6540);const l={},i=s.createContext(l);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);