"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[6144],{6566:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"developers/controller_endpoints","title":"Controller WebUI Endpoints Development Guide","description":"This document provides a comprehensive guide for developing controller WebUI endpoints in Rspamd, covering both the existing C-based endpoints and how to create new Lua-based endpoints.","source":"@site/docs/developers/controller_endpoints.md","sourceDirName":"developers","slug":"/developers/controller_endpoints","permalink":"/docs.rspamd.com/branches/master/ru/developers/controller_endpoints","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/developers/controller_endpoints.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Writing tests for Rspamd","permalink":"/docs.rspamd.com/branches/master/ru/developers/writing_tests"},"next":{"title":"Lua rules examples","permalink":"/docs.rspamd.com/branches/master/ru/developers/examples"}}');var l=s(4848),a=s(8453);const i={},t="Controller WebUI Endpoints Development Guide",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:3},{value:"URL Structure",id:"url-structure",level:3},{value:"Built-in C Endpoints",id:"built-in-c-endpoints",level:2},{value:"Authentication &amp; Status",id:"authentication--status",level:3},{value:"Statistics &amp; Monitoring",id:"statistics--monitoring",level:3},{value:"Configuration &amp; Management",id:"configuration--management",level:3},{value:"Maps Management",id:"maps-management",level:3},{value:"Message Processing",id:"message-processing",level:3},{value:"Data Visualization",id:"data-visualization",level:3},{value:"History &amp; Analysis",id:"history--analysis",level:3},{value:"System Information",id:"system-information",level:3},{value:"Creating Lua Endpoints",id:"creating-lua-endpoints",level:2},{value:"Basic Structure",id:"basic-structure",level:3},{value:"Endpoint Configuration",id:"endpoint-configuration",level:3},{value:"Configuration Options",id:"configuration-options",level:4},{value:"Choosing Authentication Level",id:"choosing-authentication-level",level:4},{value:"Handler Function Signatures",id:"handler-function-signatures",level:3},{value:"Simple Handler (need_task = false)",id:"simple-handler-need_task--false",level:4},{value:"Task Handler (need_task = true)",id:"task-handler-need_task--true",level:4},{value:"Connection Object Methods",id:"connection-object-methods",level:3},{value:"Send UCL/JSON Response",id:"send-ucljson-response",level:4},{value:"Send Plain Text",id:"send-plain-text",level:4},{value:"Send Error Response",id:"send-error-response",level:4},{value:"Request Parameters",id:"request-parameters",level:3},{value:"Accessing Query Parameters",id:"accessing-query-parameters",level:4},{value:"Processing JSON POST Data",id:"processing-json-post-data",level:4},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"Example 1: Selectors Plugin",id:"example-1-selectors-plugin",level:3},{value:"Example 2: Maps Query Plugin",id:"example-2-maps-query-plugin",level:3},{value:"Example 3: Neural Network Training",id:"example-3-neural-network-training",level:3},{value:"Authentication and Security",id:"authentication-and-security",level:2},{value:"Password Levels",id:"password-levels",level:3},{value:"Authentication Levels",id:"authentication-levels",level:3},{value:"IP-based Access",id:"ip-based-access",level:3},{value:"Session Read-Only Mode",id:"session-read-only-mode",level:3},{value:"Access Control in Handlers",id:"access-control-in-handlers",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Schema Validation",id:"schema-validation",level:3},{value:"Asynchronous Operations",id:"asynchronous-operations",level:3},{value:"Redis Operations",id:"redis-operations",level:3},{value:"AWS S3 Integration Example",id:"aws-s3-integration-example",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Plugin Registration System",id:"plugin-registration-system",level:2},{value:"Automatic Registration",id:"automatic-registration",level:3},{value:"Registration Process",id:"registration-process",level:3},{value:"Custom Plugin Registration",id:"custom-plugin-registration",level:3},{value:"User-Defined Controller Configuration",id:"user-defined-controller-configuration",level:4},{value:"Redis Configuration in Controllers",id:"redis-configuration-in-controllers",level:4},{value:"Plugin Override Behavior",id:"plugin-override-behavior",level:4},{value:"Practical Examples",id:"practical-examples",level:4},{value:"Loading External Files",id:"loading-external-files",level:4},{value:"Best Practices for Custom Controllers",id:"best-practices-for-custom-controllers",level:4},{value:"Security Considerations",id:"security-considerations",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Error Handling",id:"1-error-handling",level:3},{value:"2. Response Format",id:"2-response-format",level:3},{value:"3. Performance",id:"3-performance",level:3},{value:"4. Security",id:"4-security",level:3},{value:"5. Documentation",id:"5-documentation",level:3},{value:"Testing Endpoints",id:"testing-endpoints",level:2},{value:"Manual Testing with curl",id:"manual-testing-with-curl",level:3},{value:"Functional Testing",id:"functional-testing",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Logging in Handlers",id:"logging-in-handlers",level:3},{value:"Common Issues",id:"common-issues",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"controller-webui-endpoints-development-guide",children:"Controller WebUI Endpoints Development Guide"})}),"\n",(0,l.jsx)(n.p,{children:"This document provides a comprehensive guide for developing controller WebUI endpoints in Rspamd, covering both the existing C-based endpoints and how to create new Lua-based endpoints."}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"The Rspamd controller is an HTTP daemon that provides a REST API interface for managing and monitoring Rspamd. It serves both built-in C endpoints and dynamically loaded Lua endpoints for extended functionality."}),"\n",(0,l.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,l.jsx)(n.p,{children:"The controller system consists of:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"C core"}),": Built-in endpoints implemented in ",(0,l.jsx)(n.code,{children:"src/controller.c"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Lua plugin system"}),": Dynamic endpoints loaded from ",(0,l.jsx)(n.code,{children:"rules/controller/"})," directory"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"HTTP router"}),": Routes requests to appropriate handlers"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Authentication system"}),": Password-based security with different privilege levels"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"url-structure",children:"URL Structure"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Built-in C endpoints: ",(0,l.jsx)(n.code,{children:"/{endpoint}"})," (e.g., ",(0,l.jsx)(n.code,{children:"/stat"}),", ",(0,l.jsx)(n.code,{children:"/scan"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:["Lua plugin endpoints: ",(0,l.jsx)(n.code,{children:"/plugins/{plugin}/{path}"})," (e.g., ",(0,l.jsx)(n.code,{children:"/plugins/neural/learn"}),")"]}),"\n",(0,l.jsx)(n.li,{children:"Static files: Served from configured static directory"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"built-in-c-endpoints",children:"Built-in C Endpoints"}),"\n",(0,l.jsx)(n.p,{children:"The following endpoints are implemented in C and provide core functionality:"}),"\n",(0,l.jsx)(n.h3,{id:"authentication--status",children:"Authentication & Status"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /auth"})," - Authenticate and get system status"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /ping"})," - Simple health check"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /healthy"})," - Comprehensive health check with worker status"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /ready"})," - Readiness check for scanner workers"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"statistics--monitoring",children:"Statistics & Monitoring"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /stat"})," - Get detailed statistics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /statreset"})," - Reset statistics (privileged)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /metrics"})," - Prometheus-format metrics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /counters"})," - Symbol counters from cache"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /errors"})," - Recent error logs (privileged)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"configuration--management",children:"Configuration & Management"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /symbols"})," - List all symbols with weights and descriptions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /actions"})," - List actions with thresholds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /saveactions"})," - Save action thresholds (privileged)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /savesymbols"})," - Save symbol weights (privileged)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"maps-management",children:"Maps Management"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /maps"})," - List all maps"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /getmap"})," - Get map content by ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /savemap"})," - Save map content (privileged)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"message-processing",children:"Message Processing"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /scan"})," - Scan message and return results"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /check"})," - Alias for ",(0,l.jsx)(n.code,{children:"/scan"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /checkv2"})," - Extended scan endpoint"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /learnspam"})," - Learn message as spam (privileged)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /learnham"})," - Learn message as ham (privileged)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"data-visualization",children:"Data Visualization"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /graph"})," - Time-series graph data for WebUI"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /pie"})," - Pie chart data for action statistics"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"history--analysis",children:"History & Analysis"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /history"})," - Message processing history"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"POST /historyreset"})," - Clear history (privileged)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"system-information",children:"System Information"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /neighbours"})," - Configured neighbour nodes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /plugins"})," - List available Lua plugins"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /bayes/classifiers"})," - List Bayes classifiers"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"creating-lua-endpoints",children:"Creating Lua Endpoints"}),"\n",(0,l.jsx)(n.p,{children:"Lua endpoints provide a flexible way to extend controller functionality. They are automatically registered through the plugin system."}),"\n",(0,l.jsx)(n.h3,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,l.jsxs)(n.p,{children:["Create a Lua file in ",(0,l.jsx)(n.code,{children:"rules/controller/"})," directory:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- rules/controller/example.lua\nlocal function handle_hello(task, conn, req_params)\n  conn:send_ucl({\n    success = true,\n    message = "Hello from Lua endpoint!",\n    params = req_params\n  })\nend\n\nreturn {\n  hello = {\n    handler = handle_hello,\n    enable = false,     -- Normal password sufficient for read-only operation\n    need_task = false,\n  }\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["This creates an endpoint at ",(0,l.jsx)(n.code,{children:"/plugins/example/hello"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"endpoint-configuration",children:"Endpoint Configuration"}),"\n",(0,l.jsx)(n.p,{children:"Each endpoint is defined with the following properties:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"endpoint_name = {\n  handler = function,     -- Required: Handler function\n  enable = boolean,       -- Required: Authentication level (false=normal, true=privileged)\n  need_task = boolean,    -- Optional: Whether to create a task object\n  version = number,       -- Optional: API version\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"handler"})}),": Function that processes the request"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"enable"})}),": Authentication level - ",(0,l.jsx)(n.code,{children:"true"})," requires privileged (enable) password, ",(0,l.jsx)(n.code,{children:"false"})," allows normal password"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"need_task"})}),": Set to ",(0,l.jsx)(n.code,{children:"true"})," if the handler needs access to message content"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"version"})}),": API version number (optional)"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"choosing-authentication-level",children:"Choosing Authentication Level"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsxs)(n.strong,{children:["Use ",(0,l.jsx)(n.code,{children:"enable = false"})," for:"]})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Read-only operations (list data, query information)"}),"\n",(0,l.jsx)(n.li,{children:"Public API endpoints that don't modify system state"}),"\n",(0,l.jsx)(n.li,{children:"Endpoints that should be accessible with basic credentials"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsxs)(n.strong,{children:["Use ",(0,l.jsx)(n.code,{children:"enable = true"})," for:"]})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Operations that modify configuration"}),"\n",(0,l.jsx)(n.li,{children:"System administration functions"}),"\n",(0,l.jsx)(n.li,{children:"Sensitive data access"}),"\n",(0,l.jsx)(n.li,{children:"Operations that could affect system security"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"return {\n  -- Public read-only endpoint\n  status = {\n    handler = handle_status,\n    enable = false,       -- Normal password OK\n  },\n  \n  -- Administrative endpoint\n  reload_config = {\n    handler = handle_reload_config,\n    enable = true,        -- Requires privileged password\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"handler-function-signatures",children:"Handler Function Signatures"}),"\n",(0,l.jsx)(n.h4,{id:"simple-handler-need_task--false",children:"Simple Handler (need_task = false)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local function simple_handler(task, conn, req_params)\n  -- task: Always present but may be minimal\n  -- conn: Connection object for sending responses  \n  -- req_params: Query parameters from URL/POST data\nend\n"})}),"\n",(0,l.jsx)(n.h4,{id:"task-handler-need_task--true",children:"Task Handler (need_task = true)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local function task_handler(task, conn, req_params)\n  -- task: Full task object with message processing capabilities\n  -- conn: Connection object for sending responses\n  -- req_params: Query parameters from URL/POST data\n  \n  -- Process the message\n  task:process_message()\n  \n  -- Access message properties\n  local from = task:get_from()\n  local subject = task:get_header('Subject')\nend\n"})}),"\n",(0,l.jsx)(n.h3,{id:"connection-object-methods",children:"Connection Object Methods"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"conn"})," object provides methods for sending responses:"]}),"\n",(0,l.jsx)(n.h4,{id:"send-ucljson-response",children:"Send UCL/JSON Response"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'conn:send_ucl({\n  success = true,\n  data = { key = "value" },\n  count = 42\n})\n'})}),"\n",(0,l.jsx)(n.h4,{id:"send-plain-text",children:"Send Plain Text"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'conn:send_string("Plain text response")\n'})}),"\n",(0,l.jsx)(n.h4,{id:"send-error-response",children:"Send Error Response"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'conn:send_error(404, "Resource not found")\n-- or\nconn:send_error(500, "Internal server error: " .. error_msg)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"request-parameters",children:"Request Parameters"}),"\n",(0,l.jsx)(n.p,{children:"Parameters come from:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"URL query string"}),": ",(0,l.jsx)(n.code,{children:"?param1=value1&param2=value2"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"POST form data"}),": ",(0,l.jsx)(n.code,{children:"application/x-www-form-urlencoded"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"JSON POST body"}),": Parse manually with UCL"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"accessing-query-parameters",children:"Accessing Query Parameters"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local function handle_query(task, conn, req_params)\n  local search_term = req_params.q or ""\n  local limit = tonumber(req_params.limit) or 10\n  \n  -- Process query...\n  conn:send_ucl({\n    query = search_term,\n    limit = limit,\n    results = {}\n  })\nend\n'})}),"\n",(0,l.jsx)(n.h4,{id:"processing-json-post-data",children:"Processing JSON POST Data"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local ucl = require "ucl"\n\nlocal function handle_json_post(task, conn, req_params)\n  local parser = ucl.parser()\n  local ok, err = parser:parse_text(task:get_rawbody())\n  \n  if not ok then\n    conn:send_error(400, "Invalid JSON: " .. err)\n    return\n  end\n  \n  local data = parser:get_object()\n  -- Process data...\n  \n  conn:send_ucl({ success = true, received = data })\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,l.jsx)(n.h3,{id:"example-1-selectors-plugin",children:"Example 1: Selectors Plugin"}),"\n",(0,l.jsx)(n.p,{children:"The selectors plugin demonstrates various endpoint types:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- rules/controller/selectors.lua\nlocal lua_selectors = require \"lua_selectors\"\n\nlocal function handle_list_transforms(_, conn)\n  conn:send_ucl(lua_selectors.list_transforms())\nend\n\nlocal function handle_check_message(task, conn, req_params)\n  if req_params.selector and req_params.selector ~= '' then\n    local selector = lua_selectors.create_selector_closure(\n      rspamd_config, req_params.selector, '', true)\n    \n    if not selector then\n      conn:send_error(500, 'invalid selector')\n    else\n      task:process_message()\n      local elts = selector(task)\n      conn:send_ucl({ success = true, data = elts })\n    end\n  else\n    conn:send_error(404, 'missing selector')\n  end\nend\n\n return {\n   list_transforms = {\n     handler = handle_list_transforms,\n     enable = true,          -- System information access\n   },\n   check_message = {\n     handler = handle_check_message,\n     enable = true,          -- System information access\n     need_task = true,\n   }\n }\n"})}),"\n",(0,l.jsx)(n.h3,{id:"example-2-maps-query-plugin",children:"Example 2: Maps Query Plugin"}),"\n",(0,l.jsx)(n.p,{children:"The maps plugin shows complex parameter handling:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- rules/controller/maps.lua\nlocal function handle_query_map(_, conn, req_params)\n  local keys_to_check = {}\n  \n  if req_params.value and req_params.value ~= '' then\n    keys_to_check[1] = req_params.value\n  elseif req_params.values then\n    keys_to_check = lua_util.str_split(req_params.values, ',')\n  end\n  \n  local results = {}\n  for _, key in ipairs(keys_to_check) do\n    for uri, m in pairs(maps_cache) do\n      local value = m:get_key(key)\n      if value then\n        table.insert(results, {\n          map = uri,\n          key = key,\n          value = value,\n          hit = true\n        })\n      end\n    end\n  end\n  \n  conn:send_ucl({\n    success = (#results > 0),\n    results = results\n  })\nend\n\n return {\n   query = {\n     handler = handle_query_map,\n     enable = false,  -- Normal password sufficient (read-only operation)\n   }\n }\n"})}),"\n",(0,l.jsx)(n.h3,{id:"example-3-neural-network-training",children:"Example 3: Neural Network Training"}),"\n",(0,l.jsx)(n.p,{children:"The neural plugin demonstrates JSON schema validation:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- rules/controller/neural.lua\nlocal ts = require("tableshape").types\nlocal ucl = require "ucl"\n\nlocal learn_request_schema = ts.shape {\n  ham_vec = ts.array_of(ts.array_of(ts.number)),\n  spam_vec = ts.array_of(ts.array_of(ts.number)),\n  rule = ts.string:is_optional(),\n}\n\nlocal function handle_learn(task, conn)\n  local parser = ucl.parser()\n  local ok, err = parser:parse_text(task:get_rawbody())\n  \n  if not ok then\n    conn:send_error(400, err)\n    return\n  end\n  \n  local req_params = parser:get_object()\n  ok, err = learn_request_schema:transform(req_params)\n  \n  if not ok then\n    conn:send_error(400, err)\n    return\n  end\n  \n  -- Process training data...\n  neural_common.spawn_train {\n    ev_base = task:get_ev_base(),\n    ham_vec = req_params.ham_vec,\n    spam_vec = req_params.spam_vec,\n    -- ... other parameters\n  }\n  \n  conn:send_string(\'{"success": true}\')\nend\n\n return {\n   learn = {\n     handler = handle_learn,\n     enable = true,       -- Requires privileged password (modifies neural networks)\n     need_task = true,\n   }\n }\n'})}),"\n",(0,l.jsx)(n.h2,{id:"authentication-and-security",children:"Authentication and Security"}),"\n",(0,l.jsx)(n.h3,{id:"password-levels",children:"Password Levels"}),"\n",(0,l.jsx)(n.p,{children:"The controller supports two password levels:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Normal password"}),": Read-only access to most endpoints"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Enable password"}),": Full access including privileged operations"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"authentication-levels",children:"Authentication Levels"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"enable"})," flag in endpoint configuration controls authentication requirements:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"enable = false"})}),": Accepts normal password (read-only access)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"enable = true"})}),": Requires privileged (enable) password (full access)"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"return {\n  list_data = {\n    handler = handle_list_data,\n    enable = false,      -- Normal password sufficient\n  },\n  modify_settings = {\n    handler = handle_modify_settings,  \n    enable = true,       -- Requires privileged password\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ip-based-access",children:"IP-based Access"}),"\n",(0,l.jsxs)(n.p,{children:["Configure ",(0,l.jsx)(n.code,{children:"secure_ip"})," in worker configuration for password-less access:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'worker {\n  type = controller\n  secure_ip = ["127.0.0.1", "::1", "192.168.1.0/24"]\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"session-read-only-mode",children:"Session Read-Only Mode"}),"\n",(0,l.jsx)(n.p,{children:"The controller automatically sets session permissions:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Normal password: ",(0,l.jsx)(n.code,{children:"session.is_read_only = true"})," (unless no enable password configured)"]}),"\n",(0,l.jsxs)(n.li,{children:["Enable password: ",(0,l.jsx)(n.code,{children:"session.is_read_only = false"})]}),"\n",(0,l.jsxs)(n.li,{children:["Trusted IP: ",(0,l.jsx)(n.code,{children:"session.is_read_only = false"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"access-control-in-handlers",children:"Access Control in Handlers"}),"\n",(0,l.jsx)(n.p,{children:"Lua endpoints can check session permissions if needed:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local function sensitive_handler(task, conn, req_params)\n  -- Authentication already handled by controller\n  -- Additional checks can be implemented if needed\n  \n  local session = -- session access not directly exposed to Lua\n  -- Use enable=true in config for privileged operations\n  \n  -- Proceed with operation...\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,l.jsx)(n.h3,{id:"schema-validation",children:"Schema Validation"}),"\n",(0,l.jsx)(n.p,{children:"Use tableshape for robust input validation:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local ts = require("tableshape").types\n\nlocal request_schema = ts.shape {\n  name = ts.string,\n  count = ts.number:is_optional(),\n  tags = ts.array_of(ts.string):is_optional(),\n}\n\nlocal function validated_handler(task, conn, req_params)\n  local ok, err = request_schema:transform(req_params)\n  if not ok then\n    conn:send_error(400, "Validation error: " .. err)\n    return\n  end\n  \n  -- Process validated input...\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"asynchronous-operations",children:"Asynchronous Operations"}),"\n",(0,l.jsx)(n.p,{children:"For operations requiring external HTTP requests, use the async HTTP API:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local rspamd_http = require "rspamd_http"\n\nlocal function async_handler(task, conn, req_params)\n  local function http_callback(err, response)\n    if err then\n      conn:send_error(500, "External request failed: " .. err)\n      return\n    end\n    \n    -- Process response and send result\n    local data = response.content\n    conn:send_ucl({ \n      success = true, \n      external_data = data,\n      status_code = response.code \n    })\n  end\n  \n  -- Make async HTTP request\n  rspamd_http.request({\n    url = "https://api.example.com/data",\n    method = "POST",\n    headers = {\n      ["Content-Type"] = "application/json",\n      ["Authorization"] = "Bearer " .. req_params.token\n    },\n    body = require("ucl").to_format({\n      query = req_params.query\n    }, "json"),\n    callback = http_callback,\n    task = task,           -- Only task needed, not both task and ev_base\n    timeout = 10.0,\n  })\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"redis-operations",children:"Redis Operations"}),"\n",(0,l.jsx)(n.p,{children:"For Redis operations, use the modern lua_redis module:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local lua_redis = require "lua_redis"\n\n-- Module-level Redis configuration (usually done at module init)\nlocal redis_params = nil\n\nlocal function init_redis_config()\n  local opts = rspamd_config:get_all_opt(\'mymodule\')\n  if opts and opts.redis then\n    redis_params = lua_redis.parse_redis_server(\'mymodule\')\n  end\nend\n\nlocal function redis_handler(task, conn, req_params)\n  if not redis_params then\n    conn:send_error(500, "Redis not configured")\n    return\n  end\n  \n  local function redis_callback(err, data)\n    if err then\n      conn:send_error(500, "Redis error: " .. err)\n      return\n    end\n    \n    conn:send_ucl({ \n      success = true, \n      redis_data = data \n    })\n  end\n  \n  -- Modern Redis API\n  local attrs = {\n    task = task,\n    callback = redis_callback,\n    is_write = false,  -- false for read operations\n    key = req_params.key or "default_key"\n  }\n  \n  lua_redis.request(redis_params, attrs, {\n    \'HGET\', \n    req_params.key or "mykey", \n    req_params.field or "myfield"\n  })\nend\n\n-- Alternative: Using Redis with coroutines (no callback)\nlocal function redis_sync_handler(task, conn, req_params)\n  if not redis_params then\n    conn:send_error(500, "Redis not configured")\n    return\n  end\n  \n  local attrs = {\n    task = task,\n    is_write = false,\n    key = req_params.key or "default_key"\n  }\n  \n  -- This will work with coroutines\n  local ok, data = lua_redis.request(redis_params, attrs, {\n    \'HGET\', \n    req_params.key or "mykey", \n    req_params.field or "myfield"\n  })\n  \n  if not ok then\n    conn:send_error(500, "Redis request failed")\n    return\n  end\n  \n  conn:send_ucl({ \n    success = true, \n    redis_data = data \n  })\nend\n'})}),"\n",(0,l.jsx)(n.h4,{id:"aws-s3-integration-example",children:"AWS S3 Integration Example"}),"\n",(0,l.jsx)(n.p,{children:"Based on the AWS S3 plugin, here's how to integrate with external services:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local rspamd_http = require "rspamd_http" \nlocal lua_aws = require "lua_aws"\n\nlocal function s3_upload_handler(task, conn, req_params)\n  if not req_params.bucket or not req_params.content then\n    conn:send_error(400, "bucket and content parameters required")\n    return\n  end\n  \n  local function s3_callback(http_err, code, body, headers)\n    if http_err then\n      conn:send_error(500, "S3 upload failed: " .. http_err)\n      return\n    end\n    \n    if code == 200 then\n      conn:send_ucl({ \n        success = true, \n        s3_key = req_params.key,\n        status_code = code \n      })\n    else\n      conn:send_error(code, "S3 error: " .. (body or "unknown"))\n    end\n  end\n  \n  local s3_key = string.format("/%s/%s", req_params.path or "uploads", \n                               req_params.filename or "data.txt")\n  local aws_host = string.format(\'%s.s3.amazonaws.com\', req_params.bucket)\n  \n  local headers = lua_aws.aws_request_enrich({\n    region = req_params.region or "us-east-1",\n    headers = {\n      [\'Content-Type\'] = req_params.content_type or "text/plain",\n      [\'Host\'] = aws_host\n    },\n    uri = s3_key,\n    key_id = req_params.aws_key_id,\n    secret_key = req_params.aws_secret_key,\n    method = \'PUT\',\n  }, req_params.content)\n  \n  rspamd_http.request({\n    url = string.format("https://%s%s", aws_host, s3_key),\n    method = \'PUT\',\n    body = req_params.content,\n    headers = headers,\n    callback = s3_callback,\n    task = task,\n    timeout = 30.0,\n  })\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.p,{children:"Implement comprehensive error handling:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local function robust_handler(task, conn, req_params)\n  local ok, result = pcall(function()\n    -- Potentially failing operation\n    return process_complex_request(req_params)\n  end)\n  \n  if not ok then\n    rspamd_logger.errx(task, "Handler error: %s", result)\n    conn:send_error(500, "Internal server error")\n    return\n  end\n  \n  conn:send_ucl({ success = true, data = result })\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"plugin-registration-system",children:"Plugin Registration System"}),"\n",(0,l.jsx)(n.h3,{id:"automatic-registration",children:"Automatic Registration"}),"\n",(0,l.jsx)(n.p,{children:"Plugins are automatically loaded from:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"rules/controller/*.lua"})," - Default plugins"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"local.d/controller.lua"})," - Local overrides"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"registration-process",children:"Registration Process"}),"\n",(0,l.jsx)(n.p,{children:"The controller scans for plugins during startup:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- In rules/controller/init.lua\nlocal controller_plugin_paths = {\n  maps = dofile(local_rules .. "/controller/maps.lua"),\n  neural = dofile(local_rules .. "/controller/neural.lua"),\n  selectors = dofile(local_rules .. "/controller/selectors.lua"),\n  fuzzy = dofile(local_rules .. "/controller/fuzzy.lua"),\n}\n\n-- Local overrides\nif rspamd_util.file_exists(local_conf .. \'/controller.lua\') then\n  local overrides = dofile(local_conf .. \'/controller.lua\')\n  controller_plugin_paths = lua_util.override_defaults(\n    controller_plugin_paths, overrides)\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"custom-plugin-registration",children:"Custom Plugin Registration"}),"\n",(0,l.jsx)(n.h4,{id:"user-defined-controller-configuration",children:"User-Defined Controller Configuration"}),"\n",(0,l.jsxs)(n.p,{children:["Users can create ",(0,l.jsx)(n.code,{children:"local.d/controller.lua"})," to add custom endpoints or override existing ones. This file is automatically loaded by the controller initialization system."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"File Location"}),": ",(0,l.jsx)(n.code,{children:"local.d/controller.lua"})," (in Rspamd configuration directory)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Format"}),": The file should return a table mapping plugin names to their endpoint definitions:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- local.d/controller.lua\n\n-- Define custom endpoint handlers\nlocal function handle_custom_status(task, conn, req_params)\n  local status = {\n    server_time = os.time(),\n    custom_metric = get_custom_metric(),\n    environment = req_params.env or "production"\n  }\n  conn:send_ucl({ success = true, status = status })\nend\n\nlocal function handle_custom_reload(task, conn, req_params)\n  if not req_params.component then\n    conn:send_error(400, "component parameter required")\n    return\n  end\n  \n  -- Perform custom reload logic\n  local result = reload_custom_component(req_params.component)\n  conn:send_ucl({ success = result, component = req_params.component })\nend\n\n-- Return plugin definitions\nreturn {\n  -- Override existing plugin with custom implementation\n  maps = dofile("/usr/local/etc/rspamd/custom/enhanced_maps.lua"),\n  \n  -- Add completely new plugin\n  custom_admin = {\n    status = {\n      handler = handle_custom_status,\n      enable = false,        -- Normal password sufficient\n      need_task = false,\n    },\n    reload = {\n      handler = handle_custom_reload,\n      enable = true,         -- Requires privileged password\n      need_task = false,\n    },\n  },\n  \n  -- Load plugin from external file\n  monitoring = dofile("/opt/company/rspamd/monitoring_endpoints.lua"),\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"redis-configuration-in-controllers",children:"Redis Configuration in Controllers"}),"\n",(0,l.jsx)(n.p,{children:"When using Redis in controller endpoints, initialize the configuration at module level:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- local.d/controller.lua\nlocal lua_redis = require \"lua_redis\"\n\n-- Redis configuration initialization\nlocal redis_params = nil\n\nlocal function init_redis()\n  local opts = rspamd_config:get_all_opt('controller_redis')\n  if opts then\n    redis_params = lua_redis.parse_redis_server('controller_redis')\n  end\nend\n\n-- Initialize Redis when module loads\ninit_redis()\n\nlocal function handle_redis_data(task, conn, req_params)\n  if not redis_params then\n    conn:send_error(503, \"Redis not available\")\n    return\n  end\n  \n  local attrs = {\n    task = task,\n    callback = function(err, data)\n      if err then\n        conn:send_error(500, \"Redis error: \" .. err)\n      else\n        conn:send_ucl({ success = true, data = data })\n      end\n    end,\n    is_write = false,\n    key = req_params.cache_key\n  }\n  \n  lua_redis.request(redis_params, attrs, {'GET', req_params.cache_key})\nend\n\nreturn {\n  cache = {\n    get = {\n      handler = handle_redis_data,\n      enable = false,\n      need_task = false,\n    }\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"plugin-override-behavior",children:"Plugin Override Behavior"}),"\n",(0,l.jsxs)(n.p,{children:["The system uses ",(0,l.jsx)(n.code,{children:"lua_util.override_defaults()"})," to merge configurations:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Existing plugins"}),": Can be completely replaced by providing a new definition"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"New plugins"}),": Added alongside default plugins"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Individual endpoints"}),": Cannot be selectively overridden - entire plugin must be replaced"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example 1: Simple Custom Endpoints"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- local.d/controller.lua\n\nlocal rspamd_logger = require "rspamd_logger"\nlocal rspamd_util = require "rspamd_util"\n\nlocal function handle_server_info(task, conn, req_params)\n  local info = {\n    hostname = rspamd_util.get_hostname(),\n    version = rspamd_version,\n    uptime = rspamd_util.get_uptime(),           -- System uptime in seconds\n    worker_pid = rspamd_util.get_pid(),          -- Current process PID  \n    memory_usage = rspamd_util.get_memory_usage(), -- {rss: bytes, vsize: bytes}\n  }\n  \n  rspamd_logger.infox(rspamd_config, "Server info requested from %s", \n                      conn:get_peer_addr())\n  \n  conn:send_ucl({ success = true, server_info = info })\nend\n\nlocal function handle_custom_metrics(task, conn, req_params)\n  -- Collect custom application metrics\n  local metrics = collect_application_metrics()\n  \n  conn:send_ucl({\n    success = true,\n    timestamp = os.time(),\n    metrics = metrics\n  })\nend\n\nreturn {\n  system_info = {\n    info = {\n      handler = handle_server_info,\n      enable = false,           -- Read-only information\n      need_task = false,\n    },\n    metrics = {\n      handler = handle_custom_metrics,\n      enable = true,            -- May contain sensitive data\n      need_task = false,\n    },\n  }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"This creates endpoints:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /plugins/system_info/info"})," - Server information (normal password)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GET /plugins/system_info/metrics"})," - Custom metrics (privileged password)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example 2: External Configuration Management"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- local.d/controller.lua\n\nlocal config_manager = dofile("/etc/rspamd/custom/config_manager.lua")\n\nreturn {\n  -- Replace default maps with enhanced version\n  maps = dofile("/etc/rspamd/custom/enhanced_maps.lua"),\n  \n  -- Add configuration management endpoints\n  config = config_manager.get_endpoints(),\n  \n  -- Add monitoring endpoints loaded from external system\n  monitoring = dofile("/opt/monitoring/rspamd_endpoints.lua"),\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example 3: Development/Debug Endpoints"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- local.d/controller.lua\n\n-- Only add debug endpoints in development\nlocal environment = os.getenv("RSPAMD_ENV") or "production"\n\nlocal endpoints = {}\n\nif environment == "development" then\n  local function handle_debug_symbols(task, conn, req_params)\n    task:process_message()\n    local symbols = task:get_symbols()\n    \n    conn:send_ucl({\n      success = true,\n      debug_info = {\n        symbols = symbols,\n        meta = task:get_meta(),\n        headers = task:get_raw_headers(),\n      }\n    })\n  end\n  \n  endpoints.debug = {\n    symbols = {\n      handler = handle_debug_symbols,\n      enable = true,            -- Debug info is sensitive\n      need_task = true,         -- Needs message content\n    }\n  }\nend\n\n-- Always available admin endpoints\nlocal function handle_cache_clear(task, conn, req_params)\n  clear_application_cache()\n  conn:send_ucl({ success = true, message = "Cache cleared" })\nend\n\nendpoints.admin = {\n  clear_cache = {\n    handler = handle_cache_clear,\n    enable = true,              -- Administrative operation\n    need_task = false,\n  }\n}\n\nreturn endpoints\n'})}),"\n",(0,l.jsx)(n.h4,{id:"loading-external-files",children:"Loading External Files"}),"\n",(0,l.jsx)(n.p,{children:"When loading endpoints from external files, ensure they return the expected format:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- /opt/company/rspamd/monitoring_endpoints.lua\n\nlocal rspamd_http = require "rspamd_http"\n\nlocal function handle_health_check(task, conn, req_params)\n  -- Async health check of external services\n  rspamd_http.request({\n    url = "http://internal-api:8080/health",\n    method = "GET",\n    timeout = 5.0,\n    callback = function(err, response)\n      if err or response.code ~= 200 then\n        conn:send_error(503, "External service unavailable")\n      else\n        conn:send_ucl({ \n          success = true, \n          external_status = "healthy",\n          response_time = response.elapsed \n        })\n      end\n    end,\n    task = task,\n    ev_base = task:get_ev_base(),\n  })\nend\n\n-- Return endpoints table\nreturn {\n  health = {\n    handler = handle_health_check,\n    enable = false,             -- Health checks are generally public\n    need_task = false,\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"best-practices-for-custom-controllers",children:"Best Practices for Custom Controllers"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Namespace your plugins"})," to avoid conflicts with future Rspamd updates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use descriptive handler names"})," for easier debugging"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Validate input parameters"})," thoroughly"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Log significant actions"})," for audit trails"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Handle errors gracefully"})," with appropriate HTTP status codes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use async operations"})," for external dependencies"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Document your custom endpoints"})," for team members"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Sensitive operations"}),": Always use ",(0,l.jsx)(n.code,{children:"enable = true"})," for administrative functions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Input validation"}),": Validate all parameters to prevent injection attacks"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Audit logging"}),": Log access to sensitive endpoints"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Error messages"}),": Don't expose internal details in error responses"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Rate limiting"}),": Consider implementing rate limiting for resource-intensive endpoints"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"1-error-handling",children:"1. Error Handling"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Always validate input parameters"}),"\n",(0,l.jsx)(n.li,{children:"Use appropriate HTTP status codes"}),"\n",(0,l.jsx)(n.li,{children:"Provide meaningful error messages"}),"\n",(0,l.jsx)(n.li,{children:"Log errors for debugging"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-response-format",children:"2. Response Format"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Use consistent JSON structure"}),"\n",(0,l.jsxs)(n.li,{children:["Include ",(0,l.jsx)(n.code,{children:"success"})," field for status"]}),"\n",(0,l.jsx)(n.li,{children:"Provide descriptive field names"}),"\n",(0,l.jsx)(n.li,{children:"Handle empty results gracefully"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"3-performance",children:"3. Performance"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Cache expensive computations"}),"\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.code,{children:"need_task = false"})," when possible"]}),"\n",(0,l.jsx)(n.li,{children:"Implement pagination for large datasets"}),"\n",(0,l.jsx)(n.li,{children:"Consider async operations for slow tasks"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"4-security",children:"4. Security"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Validate all inputs"}),"\n",(0,l.jsx)(n.li,{children:"Sanitize user data"}),"\n",(0,l.jsx)(n.li,{children:"Use schema validation"}),"\n",(0,l.jsx)(n.li,{children:"Be cautious with file operations"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"5-documentation",children:"5. Documentation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Document endpoint parameters"}),"\n",(0,l.jsx)(n.li,{children:"Provide usage examples"}),"\n",(0,l.jsx)(n.li,{children:"Describe return formats"}),"\n",(0,l.jsx)(n.li,{children:"Note any special requirements"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"testing-endpoints",children:"Testing Endpoints"}),"\n",(0,l.jsx)(n.h3,{id:"manual-testing-with-curl",children:"Manual Testing with curl"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Test simple endpoint\ncurl "http://localhost:11334/plugins/example/hello?param=value"\n\n# Test with authentication\ncurl -H "Password: your-password" \\\n     "http://localhost:11334/plugins/example/data"\n\n# Test POST with JSON\ncurl -X POST \\\n     -H "Content-Type: application/json" \\\n     -H "Password: your-password" \\\n     -d \'{"key": "value"}\' \\\n     "http://localhost:11334/plugins/example/process"\n'})}),"\n",(0,l.jsx)(n.h3,{id:"functional-testing",children:"Functional Testing"}),"\n",(0,l.jsx)(n.p,{children:"Create test cases in the functional test suite using async HTTP API:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- test/functional/lua/controller_test.lua\nlocal rspamd_http = require "rspamd_http"\n\nlocal function test_custom_endpoint()\n  local function http_callback(err, response)\n    if err then\n      error("HTTP request failed: " .. err)\n    end\n    \n    -- Assert expected response\n    assert(response.code == 200)\n    assert(response.content:match("success"))\n  end\n  \n  rspamd_http.request({\n    url = "http://127.0.0.1:11334/plugins/example/hello",\n    method = "GET",\n    headers = {\n      ["Content-Type"] = "application/json",\n      ["Password"] = "test_password"  -- Add authentication if needed\n    },\n    callback = http_callback,\n    task = task,    -- Pass task if available\n    timeout = 5.0,\n  })\nend\n\n-- Example with POST data\nlocal function test_custom_post_endpoint()\n  local function http_callback(err, response)\n    if err then\n      error("HTTP POST failed: " .. err)\n    end\n    \n    local ucl = require "ucl"\n    local parser = ucl.parser()\n    parser:parse_string(response.content)\n    local data = parser:get_object()\n    \n    assert(data.success == true)\n    assert(data.processed_count > 0)\n  end\n  \n  rspamd_http.request({\n    url = "http://127.0.0.1:11334/plugins/example/process",\n    method = "POST",\n    headers = {\n      ["Content-Type"] = "application/json",\n      ["Password"] = "enable_password"  -- Privileged endpoint\n    },\n    body = require("ucl").to_format({\n      items = {"item1", "item2", "item3"},\n      operation = "batch_process"\n    }, "json"),\n    callback = http_callback,\n    task = task,\n    timeout = 10.0,\n  })\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,l.jsx)(n.h3,{id:"logging-in-handlers",children:"Logging in Handlers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local rspamd_logger = require "rspamd_logger"\n\nlocal function debug_handler(task, conn, req_params)\n  rspamd_logger.infox(task, "Handler called with params: %s", \n                      req_params)\n  \n  -- Log error conditions\n  if not req_params.required_param then\n    rspamd_logger.warnx(task, "Missing required parameter")\n    conn:send_error(400, "Missing required parameter")\n    return\n  end\n  \n  -- Debug processing\n  rspamd_logger.debugx(task, "Processing request for: %s", \n                       req_params.item)\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Endpoint not found"}),": Check plugin registration in ",(0,l.jsx)(n.code,{children:"init.lua"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Authentication failures"}),":\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify password configuration in worker config"}),"\n",(0,l.jsxs)(n.li,{children:["Check if ",(0,l.jsx)(n.code,{children:"enable = true"})," endpoints require privileged password"]}),"\n",(0,l.jsx)(n.li,{children:"Ensure correct password headers are sent"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Task errors"}),": Ensure ",(0,l.jsx)(n.code,{children:"need_task = true"})," when accessing message content"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"JSON parsing errors"}),": Validate input format and encoding"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Permission errors"}),": Check file system permissions for maps/static files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Enable flag confusion"}),":\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"enable = false"})," allows normal password access"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"enable = true"})," requires privileged (enable) password"]}),"\n",(0,l.jsx)(n.li,{children:"Flag controls authentication level, not endpoint availability"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,l.jsx)(n.p,{children:"The Rspamd controller provides a powerful framework for extending WebUI functionality through Lua plugins. By following the patterns and best practices outlined in this guide, you can create robust, secure, and efficient endpoints that integrate seamlessly with the existing system."}),"\n",(0,l.jsxs)(n.p,{children:["For more examples, examine the existing plugins in the ",(0,l.jsx)(n.code,{children:"rules/controller/"})," directory and refer to the Rspamd Lua API documentation for detailed information about available functions and objects."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var r=s(6540);const l={},a=r.createContext(l);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);