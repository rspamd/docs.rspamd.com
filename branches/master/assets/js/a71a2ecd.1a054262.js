"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[7167],{941:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"modules/surbl","title":"SURBL module","description":"This module performs scanning of URL\'s found in messages against a list of known","source":"@site/docs/modules/surbl.md","sourceDirName":"modules","slug":"/modules/surbl","permalink":"/docs.rspamd.com/branches/master/modules/surbl","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/modules/surbl.md","tags":[],"version":"current","frontMatter":{"title":"SURBL module"},"sidebar":"docs","previous":{"title":"SPF module","permalink":"/docs.rspamd.com/branches/master/modules/spf"},"next":{"title":"Trie module","permalink":"/docs.rspamd.com/branches/master/modules/trie"}}');var o=n(4848),l=n(8453);const r={title:"SURBL module"},c="SURBL module",t={},d=[{value:"Module configuration",id:"module-configuration",level:2},{value:"Principles of operation",id:"principles-of-operation",level:2},{value:"TLD composition",id:"tld-composition",level:3},{value:"DNS composition",id:"dns-composition",level:3},{value:"Results parsing",id:"results-parsing",level:3},{value:"IP lists",id:"ip-lists",level:2},{value:"Disabling SURBLs",id:"disabling-surbls",level:2},{value:"Use of URL redirectors",id:"use-of-url-redirectors",level:2}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"surbl-module",children:"SURBL module"})}),"\n",(0,o.jsxs)(s.p,{children:["This module performs scanning of URL's found in messages against a list of known\nDNS lists. It can add different symbols depending on the DNS replies from a\nspecific DNS URL list. It is also possible to resolve domains of URLs and then\ncheck the IP addresses against the normal ",(0,o.jsx)(s.code,{children:"RBL"})," style list."]}),"\n",(0,o.jsx)(s.h2,{id:"module-configuration",children:"Module configuration"}),"\n",(0,o.jsx)(s.p,{children:"The default configuration defines several public URL lists. However, their terms\nof usage normally disallows commercial or very extensive usage without purchasing\na specific sort of license."}),"\n",(0,o.jsx)(s.p,{children:"Nonetheless, they can be used by personal services or low volume requests free\nof charge."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-hcl",children:'# local.d/surbl.conf\n# List of domains that are not checked by surbl\nwhitelist = "file://$CONFDIR/surbl-whitelist.inc";\n# Additional exceptions for TLD rules\nexceptions = "file://$CONFDIR/2tld.inc";\n\nrules {\n    "SURBL_MULTI" {\n        # DNS suffix for this rule\n        suffix = "multi.surbl.org";\n        bits {\n            # List of bits ORed when reply is given\n            JP_SURBL_MULTI = 64;\n            AB_SURBL_MULTI = 32;\n            MW_SURBL_MULTI = 16;\n            PH_SURBL_MULTI = 8;\n            WS_SURBL_MULTI = 4;\n            SC_SURBL_MULTI = 2;\n        }\n    }\n    "URIBL_MULTI" {\n        suffix = "multi.uribl.com";\n        bits {\n            URIBL_BLACK = 2;\n            URIBL_GREY = 4;\n            URIBL_RED = 8;\n        }\n    }\n    "RAMBLER_URIBL" {\n        suffix = "uribl.rambler.ru";\n        # Also check images\n        images = true;\n    }\n    "DBL" {\n        suffix = "dbl.spamhaus.org";\n        # Do not check numeric URL\'s\n        noip = true;\n    }\n    "SEM_URIBL_UNKNOWN" {\n        suffix = "uribl.spameatingmonkey.net";\n        bits {\n            SEM_URIBL = 2;\n        }\n        noip = true;\n    }\n    "SEM_URIBL_FRESH15_UNKNOWN" {\n        suffix = "fresh15.spameatingmonkey.net";\n        bits {\n            SEM_URIBL_FRESH15 = 2;\n        }\n        noip = true;\n    }\n}\n'})}),"\n",(0,o.jsxs)(s.p,{children:["In general, the configuration of ",(0,o.jsx)(s.code,{children:"surbl"})," module is definition of DNS lists. Each\nlist must have suffix that defines the list itself and optionally for some lists\nit is possible to specify either ",(0,o.jsx)(s.code,{children:"bit"})," or ",(0,o.jsx)(s.code,{children:"ips"})," sections."]}),"\n",(0,o.jsxs)(s.p,{children:["Since some URL lists do not accept ",(0,o.jsx)(s.code,{children:"IP"})," addresses, it is also possible to disable sending of URLs with IP address in the host to such lists. That could be done by specifying ",(0,o.jsx)(s.code,{children:"noip = true"})," option:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-hcl",children:'"DBL" {\n    suffix = "dbl.spamhaus.org";\n    # Do not check numeric URL\'s\n    noip = true;\n}\n'})}),"\n",(0,o.jsxs)(s.p,{children:["It is also possible to check HTML images URLs using URL blacklists. Just specify ",(0,o.jsx)(s.code,{children:"images = true"})," for such list and you are done:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-hcl",children:'"RAMBLER_URIBL" {\n    suffix = "uribl.rambler.ru";\n    # Also check images\n    images = true;\n}\n'})}),"\n",(0,o.jsxs)(s.p,{children:["By default, Rspamd checks each SURBL ",(0,o.jsx)(s.code,{children:"sanity"})," by querying of ",(0,o.jsx)(s.code,{children:"facebook.com"})," domain. URL black list must NOT reply by some positive result (other than NXDOMAIN) to such a query. However, sometimes you might need to change that to another domain (e.g. to ",(0,o.jsx)(s.code,{children:"INVALID"}),"), so you can use ",(0,o.jsx)(s.code,{children:"monitored_domain"})," option from Rspamd 1.6:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-hcl",children:'"HOSTKARMA_URIBL" {\n    suffix = "hostkarma.junkemailfilter.com";\n    noip = true;\n    enabled = false;\n    ips = {\n        URIBL_HOSTKARMA_WHITE = "127.0.0.1";\n        URIBL_HOSTKARMA_BLACK = "127.0.0.2";\n        URIBL_HOSTKARMA_YELLOW = "127.0.0.3";\n        URIBL_HOSTKARMA_BROWN = "127.0.0.4";\n        URIBL_HOSTKARMA_NOBLACK = "127.0.0.5";\n        URIBL_HOSTKARMA_24_48H = "127.0.2.1";\n        URIBL_HOSTKARMA_LAST_10D = "127.0.2.2";\n        URIBL_HOSTKARMA_OLDER_10D = "127.0.2.3";\n    }\n    monitored_domain = "INVALID";\n}\n'})}),"\n",(0,o.jsx)(s.h2,{id:"principles-of-operation",children:"Principles of operation"}),"\n",(0,o.jsxs)(s.p,{children:["In this section, we define how ",(0,o.jsx)(s.code,{children:"surbl"})," module performs its checks."]}),"\n",(0,o.jsx)(s.h3,{id:"tld-composition",children:"TLD composition"}),"\n",(0,o.jsxs)(s.p,{children:["By default, we want to check some top level domain, however, many domains contain\ntwo components while others can have 3 or even more components to check against the\nlist. By default, rspamd takes top level domain as defined in the ",(0,o.jsx)(s.a,{href:"https://publicsuffix.org",children:"public suffixes"}),".\nThen one more component is prepended, for example:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"sub.example.com -> [.com] -> example.com\nsub.co.uk -> [.co.uk] -> sub.co.uk\n"})}),"\n",(0,o.jsxs)(s.p,{children:["However, sometimes even more levels of domain components are required. In this case,\nthe ",(0,o.jsx)(s.code,{children:"exceptions"})," map can be used. For example, if we want to check all subdomains of\n",(0,o.jsx)(s.code,{children:"example.com"})," and ",(0,o.jsx)(s.code,{children:"example.co.uk"}),", then we can define the following list:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"example.com\nexample.co.uk\n"})}),"\n",(0,o.jsx)(s.p,{children:"Here are new composition rules:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"sub.example.com -> [.example.com] -> sub.example.com\nsub1.sub2.example.co.uk -> [.example.co.uk] -> sub2.example.co.uk\n"})}),"\n",(0,o.jsx)(s.h3,{id:"dns-composition",children:"DNS composition"}),"\n",(0,o.jsx)(s.p,{children:"SURBL module composes the DNS request of two parts:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"TLD component as defined in the previous section;"}),"\n",(0,o.jsx)(s.li,{children:"DNS list suffix"}),"\n"]}),"\n",(0,o.jsx)(s.p,{children:"For example, to form a request to multi.surbl.org, the following applied:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"example.com -> example.com.multi.surbl.com\n"})}),"\n",(0,o.jsx)(s.h3,{id:"results-parsing",children:"Results parsing"}),"\n",(0,o.jsxs)(s.p,{children:["Normally, DNS blacklists encode reply in A record from some private network\n(namely, ",(0,o.jsx)(s.code,{children:"127.0.0.0/8"}),"). Encoding varies from one service to another. Some lists\nuse bits encoding, where a single DNS list or error message is encoded as a bit\nin the least significant octet of the IP address. For example, if bit 1 encodes ",(0,o.jsx)(s.code,{children:"LISTA"}),"\nand bit 2 encodes ",(0,o.jsx)(s.code,{children:"LISTB"}),", then we need to perform bitwise ",(0,o.jsx)(s.code,{children:"OR"})," for each specific bit\nto decode reply:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:" 127.0.0.3 -> LISTA | LISTB -> both bit symbols are added\n 127.0.0.2 -> LISTB only\n 127.0.0.1 -> LISTA only\n"})}),"\n",(0,o.jsx)(s.p,{children:"This encoding can save DNS requests to query multiple lists one at a time."}),"\n",(0,o.jsxs)(s.p,{children:["Some other lists use direct encoding of lists by some specific addresses. In this\ncase you should define results decoding principle in ",(0,o.jsx)(s.code,{children:"ips"})," section not ",(0,o.jsx)(s.code,{children:"bits"})," since\nbitwise rules are not applicable to these lists. In ",(0,o.jsx)(s.code,{children:"ips"})," section you explicitly\nmatch the ip returned by a list and its meaning."]}),"\n",(0,o.jsx)(s.h2,{id:"ip-lists",children:"IP lists"}),"\n",(0,o.jsx)(s.p,{children:"From rspamd 1.1 it is also possible to do two step checks:"}),"\n",(0,o.jsxs)(s.ol,{children:["\n",(0,o.jsx)(s.li,{children:"Resolve IP addresses of each URL"}),"\n",(0,o.jsx)(s.li,{children:"Check each IP resolved against SURBL list"}),"\n"]}),"\n",(0,o.jsx)(s.p,{children:"In general this procedure could be represented as following:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Check ",(0,o.jsx)(s.code,{children:"A"})," or ",(0,o.jsx)(s.code,{children:"AAAA"})," records for ",(0,o.jsx)(s.code,{children:"example.com"})]}),"\n",(0,o.jsxs)(s.li,{children:["For each ip address resolve it using reverse octets composition: so if IP address of ",(0,o.jsx)(s.code,{children:"example.com"})," is ",(0,o.jsx)(s.code,{children:"1.2.3.4"}),", then checks would be for ",(0,o.jsx)(s.code,{children:"4.3.2.1.uribl.tld"})]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["For example, ",(0,o.jsx)(s.a,{href:"https://www.spamhaus.org/blocklists/spamhaus-blocklist/",children:"SBL list"})," of ",(0,o.jsx)(s.code,{children:"spamhaus"})," project provides such functions using ",(0,o.jsx)(s.code,{children:"ZEN"})," multi list. This is included in rspamd default configuration:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-hcl",children:'    rule {\n        suffix = "zen.spamhaus.org";\n        symbol = "ZEN_URIBL";\n        resolve_ip = true;\n        ips {\n            URIBL_SBL = "127.0.0.2";\n        }\n    }\n'})}),"\n",(0,o.jsx)(s.h2,{id:"disabling-surbls",children:"Disabling SURBLs"}),"\n",(0,o.jsxs)(s.p,{children:["Rules can be disabled by setting the ",(0,o.jsx)(s.code,{children:"enabled"})," setting to ",(0,o.jsx)(s.code,{children:"false"}),". This allows for easily disabling SURBLs without overriding the full default configuration. The example below could be added to ",(0,o.jsx)(s.code,{children:"/etc/rspamd/local.d/surbl.conf"})," to disable the ",(0,o.jsx)(s.code,{children:"RAMBLER_URIBL"})," URIBL."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-hcl",children:'rules {\n  "RAMBLER_URIBL" {\n    enabled = false;\n  }\n}\n'})}),"\n",(0,o.jsx)(s.h2,{id:"use-of-url-redirectors",children:"Use of URL redirectors"}),"\n",(0,o.jsxs)(s.p,{children:["SURBL module is designed to work with ",(0,o.jsx)(s.a,{href:"/modules/url_redirector",children:"url_redirector module"})," which can help to resolve some known redirectors and extract the real URL to check with this module. Please refer to the module's documentation about how to work with it. SURBL module will automatically use that results."]})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var i=n(6540);const o={},l=i.createContext(o);function r(e){const s=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(l.Provider,{value:s},e.children)}}}]);