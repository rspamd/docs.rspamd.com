"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[8101],{2743:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"developers/examples","title":"Lua rules examples","description":"{:.no_toc}","source":"@site/docs/developers/examples.md","sourceDirName":"developers","slug":"/developers/examples","permalink":"/docs.rspamd.com/branches/master/developers/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/developers/examples.md","tags":[],"version":"current","frontMatter":{"title":"Lua rules examples"},"sidebar":"docs","previous":{"title":"Controller WebUI Endpoints Development Guide","permalink":"/docs.rspamd.com/branches/master/developers/controller_endpoints"},"next":{"title":"Rspamadm command","permalink":"/docs.rspamd.com/branches/master/other/rspamadm"}}');var r=s(4848),l=s(8453);const t={title:"Lua rules examples"},o="Lua rules examples",i={},d=[{value:"Languages filter",id:"languages-filter",level:2},{value:"Maildir delivery based on Rspamd",id:"maildir-delivery-based-on-rspamd",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"lua-rules-examples",children:"Lua rules examples"})}),"\n",(0,r.jsx)(n.p,{children:"{:.no_toc}"}),"\n",(0,r.jsx)(n.p,{children:"Here is the collection of the useful Lua rules snippets that are not the official rules but could be used to filter specific spam."}),"\n",(0,r.jsxs)(n.p,{children:["To enable these snippets, you can place them to the ",(0,r.jsx)(n.code,{children:"rspamd.local.lua"})," file. Typically it will be ",(0,r.jsx)(n.code,{children:"/etc/rspamd/rspamd.local.lua"})," file for the Linux distros (or ",(0,r.jsx)(n.code,{children:"/usr/local/etc/rspamd/rspamd.local.lua"})," for others)."]}),"\n",(0,r.jsx)(n.h2,{id:"languages-filter",children:"Languages filter"}),"\n",(0,r.jsxs)(n.p,{children:["This rule is useful to filter specific languages. This functionality is somehow similar to the ",(0,r.jsx)(n.a,{href:"https://spamassassin.apache.org/full/3.2.x/doc/Mail_SpamAssassin_Plugin_TextCat.html",children:"TextCat Spamassassin module"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"\nlocal ok_langs = {\n  ['en'] = true,\n  ['ca'] = true,\n  ['es'] = true,\n  ['fr'] = true,\n}\n\nrspamd_config.LANG_FILTER = {\n  callback = function(task)\n    local any_ok = false\n    local parts = task:get_text_parts() or {}\n    local ln\n    for _,p in ipairs(parts) do\n      ln = p:get_language() or ''\n      local dash = ln:find('-')\n      if dash then\n        -- from zh-cn to zh\n        ln = ln:sub(1, dash-1)\n      end\n      if ok_langs[ln] then\n        any_ok = true\n        break\n      end\n    end\n    if any_ok or not ln or #ln == 0 then\n      return false\n    end\n    return 1.0,ln\n  end,\n  score = 2.0,\n  description = 'no ok languages',\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"maildir-delivery-based-on-rspamd",children:"Maildir delivery based on Rspamd"}),"\n",(0,r.jsx)(n.p,{children:"This sample shows how to store email into Dovecot (or other IMAP server) maildir using Rspamd and different matching criterias."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local fun = require \"fun\"\nlocal logger = require \"rspamd_logger\"\n\n-- Returns newline delimiter for specific task\nlocal function get_newline_delim(task)\n\n  local nlines = task:get_newlines_type()\n  local fchars = \"\\r\\n\"\n  if nlines == 'cr' then\n    fchars = \"\\r\"\n  elseif nlines == 'lf' then\n    fchars = \"\\n\"\n  end\n\n  return fchars\nend\n\n-- Stores symbols into generic headers\nlocal function symbols_to_header(task)\n  local syms = task:get_symbols_all()\n  local hdr = {}\n  local res = task:get_metric_score()\n\n  hdr[1] = string.format('default: False [%.2f / %.2f]', res[1], res[2])\n  local m = fun.map(function(sym)\n    return string.format('%s(%.2f)[%s]', sym.name, sym.score, table.concat(sym.options or {}, ','))\n  end, syms)\n\n  fun.each(function(e)\n    hdr[#hdr + 1] = e\n  end, m)\n\n  local crlf = get_newline_delim(task)\n  local folded = table.concat(hdr, crlf .. '  ')\n  return string.format('%s: %s%s', 'X-Spamd-Result', folded, crlf)\nend\n\n-- Performs maildir saving, sharded by day\nlocal function save_task(task, folder, extra_hdrs)\n  local util = require \"rspamd_util\"\n  -- To organise moving\n  local base_folder = '/var/spool/dovecot/maildir/tmp'\n  local dst_folder = '/var/spool/dovecot/maildir'\n  \n  -- Random filename\n  local fname = string.format('%s', util.random_hex(64))\n  local src_folder = string.format('%s/', base_folder)\n  util.mkdir(src_folder)\n  local src_file = string.format('%s/%s', src_folder, fname)\n  file = io.open(src_file, 'w')\n\n  if not file then\n    logger.errx('cannot save file %s', src_file)\n    return false\n  end\n  \n  -- Add some more data when saving\n  file:write(tostring(task:get_raw_headers()))\n  file:write(symbols_to_header(task))\n\n  for k,v in pairs(extra_hdrs) do\n    file:write(k, ': ')\n    file:write(util.fold_header(k, v))\n    file:write(get_newline_delim(task))\n  end\n\n  file:write(get_newline_delim(task))\n  file:write(tostring(task:get_rawbody()))\n  file:close()\n  \n  local err,st = util.stat(src_file)\n  -- Perform sharding, ensure that dirs are existing\n  local dst_folder = string.format('%s/.%s.%s/', dst_folder, os.date('%F'), folder)\n  util.mkdir(dst_folder)\n  dst_folder = dst_folder .. '/new'\n  util.mkdir(dst_folder)\n  local dst_file = string.format('%s/%s,S=%s', dst_folder, fname, st.size)\n  -- Final rename\n  os.rename(src_file, dst_file)\n\n  logger.messagex(task, 'saved in %s', dst_file)\n\n  return true\nend\n\nrspamd_config.SAVE_MAILDIR = {\n  callback = function(task)\n\n    local foo_var = task:get_mempool():get_variable('FOO')\n    local bar_var = task:get_mempool():get_variable('BAR')\n    local res = task:get_metric_result()\n\n    if foo_var then\n      save_task(task, 'foo', {['X-Rspamd-FOO'] = foo_var})\n    elseif bar_var then\n      save_task(task, 'bar', {['X-Rspamd-BAR'] = bar_var})\n    elseif task:has_symbol('LEAKED_PASSWORD_SCAM') then\n      save_task(task, 'bitcoin', {})\n    elseif task:has_symbol('DMARC_POLICY_REJECT') or task:has_symbol('R_DKIM_REJECT') then\n      save_task(task, 'policy_failure', {})\n    elseif res.score <= 0 then\n      -- Sampling, 10%\n      if math.random() > 0.9 then\n        save_task(task, 'ham', {})\n      end\n    else\n      -- Sampling 0.1%\n      if math.random() > 0.999 then\n        save_task(task, 'gen', {})\n      end\n    end\n  end,\n  type = 'idempotent',\n  priority = 10,\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var a=s(6540);const r={},l=a.createContext(r);function t(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);