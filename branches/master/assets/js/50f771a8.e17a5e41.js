"use strict";(self.webpackChunkrspamd_docs=self.webpackChunkrspamd_docs||[]).push([[3062],{2634:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"modules/regexp","title":"Regexp module","description":"{:.no_toc}","source":"@site/docs/modules/regexp.md","sourceDirName":"modules","slug":"/modules/regexp","permalink":"/docs.rspamd.com/branches/master/modules/regexp","draft":false,"unlisted":false,"editUrl":"https://github.com/rspamd/docs.rspamd.com/edit/master/docs/modules/regexp.md","tags":[],"version":"current","frontMatter":{"title":"Regexp module"},"sidebar":"docs","previous":{"title":"RBL module","permalink":"/docs.rspamd.com/branches/master/modules/rbl"},"next":{"title":"Replies module","permalink":"/docs.rspamd.com/branches/master/modules/replies"}}');var i=s(4848),t=s(8453);const d={title:"Regexp module"},c="Rspamd regexp module",l={},o=[{value:"Principles of work",id:"principles-of-work",level:2},{value:"Expressions components",id:"expressions-components",level:2},{value:"Regular expressions",id:"regular-expressions",level:2},{value:"Internal functions",id:"internal-functions",level:2},{value:"Lua atoms",id:"lua-atoms",level:2},{value:"Regexp objects",id:"regexp-objects",level:2},{value:"Lua functions",id:"lua-functions",level:2},{value:"Regexp prefilters",id:"regexp-prefilters",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rspamd-regexp-module",children:"Rspamd regexp module"})}),"\n",(0,i.jsx)(n.p,{children:"{:.no_toc}"}),"\n",(0,i.jsx)(n.p,{children:"This is a core module that deals with regular expressions, internal functions and Lua code to filter messages."}),"\n",(0,i.jsx)(n.h2,{id:"principles-of-work",children:"Principles of work"}),"\n",(0,i.jsxs)(n.p,{children:["The Regexp module operates using ",(0,i.jsx)(n.code,{children:"expressions"})," which consist of a logical sequence of ",(0,i.jsx)(n.code,{children:"atoms"}),". ",(0,i.jsx)(n.code,{children:"Atoms"})," can be regular expressions, Rspamd functions, or Lua functions. Rspamd supports a range of operators within expressions, including:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"&&"})," - logical AND (can be also written as ",(0,i.jsx)(n.code,{children:"and"})," or even ",(0,i.jsx)(n.code,{children:"&"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"||"})," - logical OR (",(0,i.jsx)(n.code,{children:"or"})," ",(0,i.jsx)(n.code,{children:"|"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"!"})," - logical NOT (",(0,i.jsx)(n.code,{children:"not"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+"})," - logical PLUS, usually used with comparisons:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:">"})," more than"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<"})," less than"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:">="})," more or equal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<="})," less or equal"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The PLUS operator in Rspamd connects multiple ",(0,i.jsx)(n.code,{children:"atoms"})," or sub-expressions and compares them to a specific number:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"A + B + C + D > 2"})," - evaluates to ",(0,i.jsx)(n.code,{children:"true"})," if at least 3 operands are true\n",(0,i.jsx)(n.code,{children:"(A & B) + C + D + E >= 2"})," -  evaluates to ",(0,i.jsx)(n.code,{children:"true"})," if at least 2 operands are true"]}),"\n",(0,i.jsx)(n.p,{children:"Operator priority:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"NOT"}),"\n",(0,i.jsx)(n.li,{children:"PLUS"}),"\n",(0,i.jsx)(n.li,{children:"COMPARE"}),"\n",(0,i.jsx)(n.li,{children:"AND"}),"\n",(0,i.jsx)(n.li,{children:"OR"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Use parentheses to change priority. In Rspamd, all operations are ",(0,i.jsx)(n.em,{children:"right"})," associative. During expression evaluation, Rspamd optimizes execution time by reordering and avoids evaluating unnecessary branches."]}),"\n",(0,i.jsx)(n.h2,{id:"expressions-components",children:"Expressions components"}),"\n",(0,i.jsx)(n.p,{children:"Rspamd support the following components within expressions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Regular expressions"}),"\n",(0,i.jsx)(n.li,{children:"Internal functions"}),"\n",(0,i.jsx)(n.li,{children:"Lua global functions (not widely used)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"regular-expressions",children:"Regular expressions"}),"\n",(0,i.jsx)(n.p,{children:"In Rspamd, regular expressions can be used to examine different parts of the message:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Headers (should be ",(0,i.jsx)(n.code,{children:"Header-Name=/regexp/iumxs{header}"}),"), MIME part headers"]}),"\n",(0,i.jsx)(n.li,{children:"Full headers string"}),"\n",(0,i.jsx)(n.li,{children:"Textual MIME parts"}),"\n",(0,i.jsx)(n.li,{children:"Raw messages"}),"\n",(0,i.jsx)(n.li,{children:"URLs"}),"\n",(0,i.jsxs)(n.li,{children:["Strings returned by a selector (",(0,i.jsx)(n.code,{children:"re_selector_name=/regexp/iumxs{selector}"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The match type is defined by a flag that appears after the last ",(0,i.jsx)(n.code,{children:"/"})," symbol. This can be a single letter or a long type enclosed in curly braces, which has been available since Rspamd 1.3:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Long type"}),(0,i.jsx)(n.th,{children:"Tested content"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"H"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{header}"})}),(0,i.jsxs)(n.td,{children:["Header value; if the header contains ",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc2047",children:"encoded words"})," they are decoded and converted to UTF-8. All invalid UTF-8 bytes are replaced by a ",(0,i.jsx)(n.code,{children:"?"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"X"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{raw_header}"})}),(0,i.jsxs)(n.td,{children:["Raw header value (encoded words are not decoded, but ",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc5322#section-2.2.3",children:"folding"})," is removed)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"B"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{mime_header}"})}),(0,i.jsxs)(n.td,{children:["MIME header value extracted for headers in MIME parts that are not ",(0,i.jsx)(n.code,{children:"message/rfc822"})," and that are enclosed in multipart containers only"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"R"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{all_headers}"})}),(0,i.jsxs)(n.td,{children:["Full headers content (applied for all headers in their original form and for the message only - ",(0,i.jsx)(n.strong,{children:"not"})," including MIME headers)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"M"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{body}"})}),(0,i.jsxs)(n.td,{children:["Full message (with all ",(0,i.jsx)(n.em,{children:"headers"}),") as it was sent to Rspamd"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"P"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{mime}"})}),(0,i.jsx)(n.td,{children:"Text MIME part content; base64/quoted-printable is decoded, HTML tags are stripped; if charset is not UTF-8 Rspamd tries to convert it to UTF-8, but if conversion fails the original text is examined"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Q"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{raw_mime}"})}),(0,i.jsx)(n.td,{children:"Text MIME part raw content (unmodified by Rspamd)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"C"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{sa_body}"})}),(0,i.jsxs)(n.td,{children:["SpamAssassin ",(0,i.jsx)(n.code,{children:"body"})," analogue (see body pattern test description in ",(0,i.jsx)(n.a,{href:"https://spamassassin.apache.org/full/3.4.x/doc/Mail_SpamAssassin_Conf.html#RULE-DEFINITIONS-AND-PRIVILEGED-SETTINGS",children:"SpamAssassin documentation"}),"); if charset is not UTF-8, Rspamd tries to convert text to UTF-8"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"D"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{sa_raw_body}"})}),(0,i.jsxs)(n.td,{children:["SpamAssassin ",(0,i.jsx)(n.code,{children:"rawbody"})," analogue (raw data inside text parts, base64/quoted-printable is decoded, but HTML tags and line breaks are preserved)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"U"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{url}"})}),(0,i.jsxs)(n.td,{children:["URLs (before 2.4 also email addresses extracted from the message body, in the same form as returned by ",(0,i.jsx)(n.a,{href:"/lua/rspamd_url#m6b648",children:"url:tostring()"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"$"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{selector}"})}),(0,i.jsxs)(n.td,{children:["Strings returned by a ",(0,i.jsx)(n.a,{href:"/configuration/selectors#regular-expressions-selectors",children:"selector"})," (from 1.8)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{email}"})}),(0,i.jsx)(n.td,{children:"Emails extracted from the message body (from 2.4)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{words}"})}),(0,i.jsxs)(n.td,{children:["Unicode normalized (to ",(0,i.jsx)(n.a,{href:"https://www.unicode.org/reports/tr15/#Norm_Forms",children:"NFKC"}),") and lower-cased words extracted from the text (excluding URLs), subject and From displayed name"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{raw_words}"})}),(0,i.jsx)(n.td,{children:"The same words, but without normalization (converted to utf8 however)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{stem_words}"})}),(0,i.jsxs)(n.td,{children:["Unicode normalized, lower-cased and ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Stemming",children:"stemmed"})," words extracted from the text (excluding URLs), Subject and From display name"]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Each regexp also supports the following modifiers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"i"})," - ignore case"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"u"})," - use UTF-8 regexp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"m"})," - multi-line regular expression - this flag causes the string to be treated as multiple lines. This means that the ",(0,i.jsx)(n.code,{children:"^"})," and ",(0,i.jsx)(n.code,{children:"$"})," symbols match the start and end of each line within the string, rather than just the start and end of the first and last lines."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," - extended regular expression - this flag instructs the regular expression parser to ignore most white-space that is not escaped (",(0,i.jsx)(n.code,{children:"\\"}),") or within a bracketed character class. This makes it possible to break up the regular expression into more readable parts. Additionally, the ",(0,i.jsx)(n.code,{children:"#"})," character is treated as a meta-character that introduces a comment which runs up to the pattern's closing delimiter or to the end of the current line if the pattern extends onto the next line."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"s"})," - dot-all regular expression - this flag causes the string to be treated as a single line. This means that the ",(0,i.jsx)(n.code,{children:"."})," symbol matches any character whatsoever, including a newline, which it would not normally match. When used together as ",(0,i.jsx)(n.code,{children:"/ms"}),", they allow the ",(0,i.jsx)(n.code,{children:"."})," to match any character while still allowing ",(0,i.jsx)(n.code,{children:"^"})," and ",(0,i.jsx)(n.code,{children:"$"})," to respectively match just after and just before newlines within the string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"O"})," - do not optimize regexp (rspamd optimizes regexps by default)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"r"})," - use non-UTF-8 regular expressions (raw bytes). Defaults to ",(0,i.jsx)(n.code,{children:"true"})," if ",(0,i.jsx)(n.code,{children:"raw_mode"})," is set to ",(0,i.jsx)(n.code,{children:"true"})," in the options section."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"A"})," - return and process all matches (useful for Lua prefilters)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"L"})," - match left part of regexp (useful for Lua prefilters in conjunction with Hyperscan)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"internal-functions",children:"Internal functions"}),"\n",(0,i.jsx)(n.p,{children:"Rspamd supports a set of internal functions to do some common spam filtering tasks:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"check_smtp_data(type[, str or /re/])"})," - checks for the specific envelope argument: ",(0,i.jsx)(n.code,{children:"from"}),", ",(0,i.jsx)(n.code,{children:"rcpt"}),", ",(0,i.jsx)(n.code,{children:"user"}),", ",(0,i.jsx)(n.code,{children:"subject"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compare_encoding(str or /re/)"})," - compares message encoding with string or regexp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compare_parts_distance(inequality_percent)"})," - if a message is multipart/alternative, compare two parts and return ",(0,i.jsx)(n.code,{children:"true"})," if they are unequal more than ",(0,i.jsx)(n.code,{children:"inequality_percent"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compare_recipients_distance(inequality_percent)"})," - check how different are recipients of a message (works for > 5 recipients)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"compare_transfer_encoding(str or /re/)"})," - compares message transfer encoding with string or regexp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content_type_compare_param(param, str or /re/)"})," - compare content-type parameter ",(0,i.jsx)(n.code,{children:"param"})," with string or regexp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content_type_has_param(param)"})," - return true if ",(0,i.jsx)(n.code,{children:"param"})," exists in content-type"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content_type_is_subtype(str or /re/"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if sub-type of content-type matches string or regexp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content_type_is_type(str or /re/)"}),"- return ",(0,i.jsx)(n.code,{children:"true"})," if type of content-type matches string or regexp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_content_part(type)"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if the part with the specified ",(0,i.jsx)(n.code,{children:"type"})," exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_content_part_len(type, len)"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if the part with the specified ",(0,i.jsx)(n.code,{children:"type"})," exists and have at least ",(0,i.jsx)(n.code,{children:"len"})," length"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_fake_html()"})," - check if there is an HTML part in message with no HTML tags"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_flag(flag)"})," - returns ",(0,i.jsx)(n.code,{children:"true"})," is this task has a specific flag:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"pass_all"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"no_log"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"no_stat"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"skip"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"extended_urls"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"learn_spam"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"learn_ham"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"greylisted"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"broken_headers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"skip_process"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"milter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"bad_unicode"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_html_tag(tagname)"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if HTML part contains specified tag"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_only_html_part()"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if there is merely a single HTML part"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"has_symbol(symbolname)"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if symbol name is present in result"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"header_exists(header)"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if a specified header exists in the message"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"is_empty_body()"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if the message has no payload body"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"is_html_balanced()"})," - check whether HTML part has balanced tags"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"is_recipients_sorted()"})," - return ",(0,i.jsx)(n.code,{children:"true"})," if there are more than 5 recipients in a message and they are sorted"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"raw_header_exists()"})," - does the same as ",(0,i.jsx)(n.code,{children:"header_exists"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Many of these functions are just legacy but they are supported in terms of compatibility."}),"\n",(0,i.jsx)(n.h2,{id:"lua-atoms",children:"Lua atoms"}),"\n",(0,i.jsx)(n.p,{children:"Lua atoms can now be either the names of Lua global functions or callbacks. This is a compatibility feature for rules that were written previously."}),"\n",(0,i.jsx)(n.h2,{id:"regexp-objects",children:"Regexp objects"}),"\n",(0,i.jsx)(n.p,{children:"Starting from Rspamd 1.0, the power of regular expression rules can be enhanced by using table notation. When writing rules, a table can contain the following fields:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"}),": lua callback for the rule"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"re"}),": regular expression (mutually exclusive with ",(0,i.jsx)(n.code,{children:"callback"})," option)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"condition"}),": function of task that determines when a rule should be executed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"score"}),": default score"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"description"}),": default description"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"one_shot"}),": default one shot settings"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of table form definition of regexp rule:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"config['regexp']['RE_TEST'] = {\n    re = '/test/i{mime}',\n    score = 10.0,\n    condition = function(task)\n        if task:get_header('Subject') then\n            return true\n        end\n        return false\n    end,\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"lua-functions",children:"Lua functions"}),"\n",(0,i.jsxs)(n.p,{children:["Starting from version ",(0,i.jsx)(n.code,{children:"1.8.4"}),", Rspamd also supports the use of local Lua functions in regular expression atoms using Regexp object notation. These functions must be defined in the ",(0,i.jsx)(n.code,{children:"functions"})," element, which should be a table of functions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"config.regexp.BLA = {\n  re = [[/re1/ & /re2/ & (lua:myfunction1 | !lua:myfunction2)]],\n  functions = {\n    myfunction1 = function(task) ... end,\n    myfunction2 = function(task) ... end,\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Please note that you ",(0,i.jsx)(n.strong,{children:"cannot"})," use asynchronous functions, including those with  ",(0,i.jsx)(n.a,{href:"/developers/sync_async",children:"coroutines"}),", in these Lua snippets, as Rspamd will not wait for them to finish. The only way to use such functions in Regexp expressions is to create a dedicated rule that performs asynchronous tasks, register the dependency for the regexp symbol using ",(0,i.jsx)(n.code,{children:"rspamd_config:register_dependency('RE_SYMBOL', 'ASYNC_SYMBOL')"}),", and then call ",(0,i.jsx)(n.code,{children:"task:has_symbol('ASYNC_SYMBOL')"})," in the Lua function defined in the Regexp expression."]}),"\n",(0,i.jsx)(n.h2,{id:"regexp-prefilters",children:"Regexp prefilters"}),"\n",(0,i.jsx)(n.p,{children:"Rspamd has supported Lua filters for regular expressions since version 2.6. The concept is to enable quick prefiltering using regular expressions and slower Lua post-processing when necessary. Here is an example of how it's used in the Bitcoin library:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"config.regexp['RE_POSTPROCESS'] = {\n  description = 'Example of post-processing for regular expressions',\n  re = string.format('(%s) || (%s)', re1, re2),\n  re_conditions = {\n    [re1] = function(task, txt, s, e)\n      if e - s <= 2 then\n        return false\n      end\n\n      if check_re1(task, txt:sub(s + 1, e)) then\n        return true\n      end\n    end,\n    [re2] = function(task, txt, s, e)\n      if e - s <= 2 then\n        return false\n      end\n\n      if check_re2(task, txt:sub(s + 1, e)) then\n        return true\n      end\n    end,\n  },\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This feature enables the addition of accelerated rules that are only enabled when relatively rare regular expressions match. In this particular case, the feature is used for Bitcoin wallet verification and validation."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function d(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);